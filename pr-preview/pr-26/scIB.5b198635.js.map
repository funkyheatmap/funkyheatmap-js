{"mappings":"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","sources":["d3.js","src/main.js","_.js","src/input_util.js","src/columns.js","src/palettes.js","src/legends.js","src/geoms.js"],"sourcesContent":["module.exports=d3;","import * as d3 from 'd3';\nimport * as _ from 'lodash';\n\nimport { ensureRowData } from './input_util';\nimport { buildColumnInfo, buildColumnGroups, Column } from './columns';\nimport { assignPalettes } from './palettes';\nimport { prepareLegends } from './legends';\nimport { GEOMS } from './geoms';\n\n\n/**\n * @typedef {Object} ColumnData\n * @description A dataframe in column-based format. Each property is a column, represented as an\n *   array. All columns are of the same length.\n * @example\n * {\n *   'model': ['Toyota Corolla', 'Fiat 128', 'Honda Civic'],\n *   'mpg': [33.9, 32.4, 30.4],\n *   'weight': [1.835, 2.2, 1.615]\n * }\n */\n\n/**\n * @typedef {Object[]} RowData\n * @description A dataframe in row-based format. Each element is an object with properties. All\n *   objects have the same properties.\n * @example\n * [\n *   {model: 'Toyota Corolla', mpg: 33.9, weight: 1.835},\n *   {model: 'Fiat 128', mpg: 32.4, weight: 2.2},\n *   {model: 'Honda Civic', mpg: 30.4, weight: 1.615}\n * ]\n */\n\n/**\n * @typedef {Object} HeatmapOptions\n * @property {boolean} [colorByRank=false] - whether to color elements by rank, default for all\n *   numeric columns\n * @property {number} [legendFontSize=12] - font size for legend labels\n * @property {boolean} [labelGroupsAbc=false] - whether to add alphabetical index to column groups\n *   labels\n * @property {number} [tooltipPrecision=4] - number of decimal places for floats in the tooltip\n * @property {Object} [theme] - theme options\n * @property {string} [theme.oddRowBackground='white'] - background color for odd rows\n * @property {string} [theme.evenRowBackground='#eee'] - background color for even rows\n * @property {string} [theme.textColor='black'] - color for text\n * @property {string} [theme.strokeColor='#555'] - edge color for geoms and guides\n * @property {string} [theme.headerColor='black'] - color for header text\n * @property {string} [theme.hoverColor='#1385cb'] - color for hovered text\n */\nconst DEFAULT_OPTIONS = {\n    legendFontSize: 12,\n    legendTicks: [0, 0.2, 0.4, 0.6, 0.8, 1],\n    labelGroupsAbc: false,\n    colorByRank: false,\n    tooltipPrecision: 4,\n    theme: {\n        oddRowBackground: 'white',\n        evenRowBackground: '#eee',\n        textColor: 'black',\n        strokeColor: '#555',\n        headerColor: 'black',\n        hoverColor: '#1385cb'\n    }\n};\n\nconst DEFAULT_POSITION_ARGS = {\n    rowHeight: 24,\n    rowSpace: 0.1,\n    rowBigspace: 1,\n    colWidth: 24,\n    colSpace: 0.1,\n    colBigspace: 1,\n    colAnnotOffset: 10,\n    colAnnotAngle: 30,\n    padding: 5,\n    minGeomSize: 0.25,\n    funkyMidpoint: 0.8\n}\n\n/**\n * Positional options for the heatmap.\n *\n * @property {number} rowHeight - height of a heatmap row, in pixels\n * @property {number} rowSpace - space between rows, as a fraction of rowHeight. Twice the padding\n * @property {number} rowBigspace - space between groups of rows, as a fraction of rowHeight\n * @property {number} colSpace - space between columns, as a fraction of rowHeight. Twice the\n *   padding\n * @property {number} colAnnotOffset - offset of column groups from column labels, in pixels\n * @property {number} colAnnotAngle - angle of column labels, in degrees\n * @property {number} padding - padding used in certain places. TODO: document\n * @property {number} minGeomSize - minimum size of a heatmap element, in pixels\n * @property {number} funkyMidpoint - midpoint for funkyrect geom\n * @property {number} rowSpacePx - space between rows, in pixels. _Calculated_\n * @property {number} rowBigspacePx - space between groups of rows, in pixels. _Calculated_\n * @property {number} colSpacePx - space between columns, in pixels. _Calculated_\n * @property {number} geomSize - size of a heatmap element, in pixels. _Calculated_\n * @property {number} geomPadding - padding around heatmap elements, in pixels. _Calculated_\n * @property {number} geomPaddingX - padding around heatmap elements in the x direction, in pixels.\n *   _Calculated_\n * @property {number} bodyHeight - height of the heatmap body, in pixels. _Calculated_\n * @property {number} bodyWidth - width of the heatmap body, in pixels. _Calculated_\n * @property {number} width - width of the heatmap, in pixels, including header and footer.\n *   _Calculated_\n * @property {number} headerHeight - height of the header, in pixels. _Calculated_\n * @property {number} footerHeight - height of the footer, in pixels. _Calculated_\n * @property {number} footerOffset - offset of the footer from the left edge of the heatmap,\n *   in pixels. _Calculated_\n */\nclass PositionArgs {\n    /**\n     * @param {Object} args - object with positional options\n     * @param {number} [args.rowHeight=24] - height of a heatmap row, in pixels\n     * @param {number} [args.rowSpace=0.1] - space between rows, as a fraction of rowHeight.\n     *   Twice the padding\n     * @param {number} [args.rowBigspace=1] - space between groups of rows, as a fraction of\n     *   rowHeight\n     * @param {number} [args.colWidth=24] - width of a heatmap column, in pixels.\n     *   Deprecated, has no effect\n     * @param {number} [args.colSpace=0.1] - space between columns, as a fraction of rowHeight.\n     *   Twice the padding\n     * @param {number} [args.colBigspace=1] - space between groups of columns, as a fraction of\n     *   rowHeight. Currently not used\n     * @param {number} [args.colAnnotOffset=3] - offset of column groups from column labels,\n     *   in pixels\n     * @param {number} [args.colAnnotAngle=30] - angle of column labels, in degrees\n     * @param {number} [args.padding=5] - padding around heatmap elements, in pixels\n     * @param {number} [args.minGeomSize=0.25] - minimum size of a heatmap element, in pixels\n     * @param {number} [args.funkyMidpoint=0.8] - midpoint for funkyrect geom\n     */\n    constructor(args) {\n        _.extend(this, DEFAULT_POSITION_ARGS);\n        _.extend(this, args);\n        let underscoreDeprecatedArgs = [];\n        let deprecatedArgs = [];\n        for (let key of Object.getOwnPropertyNames(args)) {\n            let underscore = key.indexOf('_');\n            if (underscore > -1) {\n                let newKey;\n                while (underscore > -1) {\n                    newKey = key.slice(0, underscore) + key[underscore + 1].toUpperCase() + key.slice(underscore + 2);\n                    underscore = key.indexOf('_', underscore + 1);\n                }\n                this[newKey] = args[key];\n                underscoreDeprecatedArgs.push(key);\n                key = newKey;\n            }\n            if (key.startsWith('expand') || key == 'colWidth') {\n                deprecatedArgs.push(key);\n            }\n        }\n        if (underscoreDeprecatedArgs.length > 0) {\n            let msg = 'Position arguments with underscores were accepted, but are deprecated. Use camelCase instead.';\n            msg += ` Found: ${underscoreDeprecatedArgs.join(', ')}`;\n            console.warn(msg);\n        }\n        if (deprecatedArgs.length > 0) {\n            let msg = 'The following position arguments are deprecated and have no effect: ';\n            msg += deprecatedArgs.join(', ');\n            console.warn(msg);\n        }\n        this.calculate();\n    }\n\n    /**\n     * Pre-calculate needed values based on the options.\n     */\n    calculate() {\n        this.rowSpacePx = this.rowHeight * this.rowSpace;\n        this.rowBigspacePx = this.rowHeight * this.rowBigspace;\n        this.colSpacePx = this.rowHeight * this.colSpace;\n        // assuming square\n        this.geomSize = this.rowHeight - this.rowSpacePx;\n        this.geomPadding = this.rowSpacePx / 2;\n        this.geomPaddingX = this.colSpacePx / 2;\n    }\n}\n\n/**\n * Heatmap class\n * @property {PositionArgs} positionArgs\n */\nclass FunkyHeatmap {\n    constructor(\n        data,\n        columnInfo,\n        columnGroups,\n        rowInfo,\n        rowGroups,\n        palettes,\n        legends,\n        positionArgs,\n        options,\n        svg\n    ) {\n        this.rowGroupKey = '__group';\n\n        this.data = data;\n        this.columnInfo = columnInfo;\n        this.columnGroups = d3.index(columnGroups, group => group.group);\n        this.rowInfo = rowInfo;\n        this.rowGroups = d3.index(rowGroups, group => group.group);\n        this.palettes = palettes;\n        this.legends = legends;\n        this.positionArgs = new PositionArgs(positionArgs);\n        this.options = _.merge(DEFAULT_OPTIONS, options);\n        this.calculateOptions();\n        this.svg = svg;\n    }\n\n    calculateOptions() {\n        this.renderGroups = false;\n\n        this.rowGroupOrder = [];\n        // if we don't have row groups, put all rows in unnamed group\n        if (this.rowInfo.length === 0 || this.rowInfo[0].group === undefined) {\n            this.rowInfo = this.data.map(_ => { return {group: ''} });\n        }\n\n        this.data.forEach((d, i) => {\n            const group = this.rowInfo[i].group;\n            d[this.rowGroupKey] = group;\n            if (this.rowGroupOrder.indexOf(group) === -1) {\n                this.rowGroupOrder.push(group);\n            }\n        });\n        const group = this.rowInfo[0].group\n        const groupInfo = this.rowGroups.get(group);\n        if (groupInfo !== undefined && groupInfo.Group !== undefined) {\n            this.renderGroups = true;\n        }\n    }\n\n    renderStripedRows() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let rowGroup, nGroups = 0, colorCounter = 0;\n        this.data.forEach((d, i) => {\n            if (this.renderGroups && d[this.rowGroupKey] !== rowGroup) {\n                nGroups += 1;\n                colorCounter = 0;\n            }\n            rowGroup = d[this.rowGroupKey];\n            this.body.append('rect')\n                .classed('row', true)\n                .attr('height', P.rowHeight)\n                .attr('x', 0)\n                .attr('y', (i + nGroups) * P.rowHeight)\n                .attr('fill', colorCounter % 2 === 0\n                                ? O.theme.evenRowBackground\n                                : O.theme.oddRowBackground);\n            colorCounter += 1;\n        });\n    }\n\n    renderData() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let offset = 0;\n        P.bodyHeight = this.data.length * P.rowHeight;\n        if (this.renderGroups) {\n            P.bodyHeight += this.rowGroups.size * P.rowHeight;\n        }\n        let prevColGroup;\n\n        this.columnInfo.forEach((column, i) => {\n            let maxWidth = 0;\n            let padding = P.geomPaddingX;\n            let firstColumn = i === 0;\n            if (column.geom === 'text' || column.geom === 'bar') {\n                padding = P.padding;\n            }\n            offset += padding;\n            if (prevColGroup && column.group && prevColGroup !== column.group) {\n                offset += 2 * P.padding;\n            }\n            let rowGroup, nGroups = 0;\n            this.data.forEach((item, j) => {\n                let width = 0;\n                if (this.renderGroups && item[this.rowGroupKey] !== rowGroup) {\n                    nGroups += 1;\n                }\n                if (this.renderGroups && firstColumn && item[this.rowGroupKey] !== rowGroup) {\n                    let groupName = GEOMS.text(\n                        this.rowGroups.get(item[this.rowGroupKey]).Group,\n                        null,\n                        column,\n                        O,\n                        P\n                    );\n                    groupName\n                        .attr('transform', `translate(${offset - padding}, ${(j + nGroups - 1) * P.rowHeight})`)\n                        .attr('font-weight', 'bold')\n                        .attr('dominant-baseline', 'hanging');\n                    this.body.append(() => groupName.node());\n                    width = groupName.node().getBBox().width;\n                }\n                rowGroup = item[this.rowGroupKey];\n                let value = column.getValue(item);\n                if (value === undefined || value === null || (isNaN(value) && column.numeric)) {\n                    return;\n                }\n                let colorValue = column.getColorValue(item, j);\n                let label;\n                if (column.label) {\n                    label = item[column.label];\n                }\n                if (GEOMS[column.geom] === undefined) {\n                    throw `Geom ${column.geom} not implemented. Use one of ${Object.keys(GEOMS).join(', ')}.`;\n                }\n                let el = GEOMS[column.geom](value, colorValue, column, O, P);\n                if (label) {\n                    const labelColor = d3.hsl(column.palette(colorValue)).l > 0.5\n                        ? 'black'\n                        : 'white';\n                    const g = d3.create('svg:g')\n                        .classed('fh-geom', true);\n                    g.append(() => el.classed('fh-geom', false).classed('fh-orig-geom', true).node());\n                    // By default place label in the center of the geom\n                    let labelX = P.rowHeight / 2;\n                    if (column.geom === 'bar') {\n                        // Bars are of different widths, place label on the left\n                        labelX = P.padding + P.geomPaddingX * 3;\n                    }\n                    g.append('text')\n                        .attr('x', labelX)\n                        .attr('y', P.rowHeight / 2)\n                        .attr('text-anchor', 'middle')\n                        .attr('dominant-baseline', 'central')\n                        .attr('fill', labelColor)\n                        .text(label);\n                    el = g;\n                }\n                el.attr('transform', `translate(${offset}, ${(j + nGroups) * P.rowHeight})`);\n                const tooltipValue = column.getHoverText(item, O.tooltipPrecision);\n                if (tooltipValue !== undefined) {\n                    el.datum({tooltip: tooltipValue});\n                }\n                if (column.geom === 'pie') {\n                    const s = 'margin: 5px; border-collapse: collapse; border-top: 1px solid #aaa; border-left: 1px solid #aaa; font-size: 80%';\n                    const s2 = 'padding: 2px 4px; border-bottom: 1px solid #aaa; border-right: 1px solid #aaa';\n                    let tooltip = `<table style=\"${s}\">${column.palette.colorNames.map((colorName, i) => {\n                        return `<tr><td style=\"${s2}\">${colorName}:</td><td style=\"${s2}\">${value[i].toFixed(O.tooltipPrecision)}</td></tr>`;\n                    }).join('')}</table>`;\n                    el.datum({tooltip: tooltip});\n                }\n                this.body.append(() => el.node());\n                let elWidth;\n                if (label) {\n                    elWidth = el.select('.fh-orig-geom').node().getBBox().width;\n                } else {\n                    elWidth = el.node().getBBox().width;\n                }\n                if (column.geom === 'image') {\n                    elWidth = column.width;\n                }\n                if (elWidth > width) {\n                    width = elWidth;\n                }\n                if (width > maxWidth) {\n                    maxWidth = width;\n                }\n                if (label) {\n                    label = el.select('text');\n                    let fontSize = 100;\n                    for (let q = 0; q < 12; q++) {\n                        const { width } = label.node().getBBox();\n                        if (width > P.geomSize - P.geomPaddingX * 2) {\n                            fontSize -= 5;\n                            label.attr('font-size', `${fontSize}%`);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            });\n            if (column.geom === 'bar' && column.options.drawGuide !== false) {\n                maxWidth = P.geomSize * column.width + P.geomPadding;\n                this.body.append('line')\n                    .attr('x1', offset + maxWidth)\n                    .attr('x2', offset + maxWidth)\n                    .attr('y1', this.renderGroups ? P.rowHeight : 0)\n                    .attr('y2', P.bodyHeight)\n                    .attr('stroke', O.theme.strokeColor)\n                    .attr('stroke-dasharray', '5 5')\n                    .attr('opacity', 0.5);\n            }\n            column.widthPx = Math.max(maxWidth, P.rowHeight);\n            column.widthPx = Math.round(column.widthPx);\n            column.offset = offset;\n            offset += column.widthPx + padding;\n            prevColGroup = column.group;\n        });\n        P.bodyWidth = offset + P.colSpacePx;\n    }\n\n    renderHeader() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let headerHeight = 0;\n        let bodyWidth = 0;\n        let nonZeroRotate = false;\n        const groups = this.header.append('g');\n        const labels = this.header.append('g')\n            .attr('transform', `translate(0, ${P.rowHeight + P.colAnnotOffset})`);\n\n        const columnGroups = d3.group(this.columnInfo, column => column.group);\n        let abcCounter = 0;\n        columnGroups.forEach((group, groupName) => {\n            if (!groupName) {\n                return;\n            }\n            const groupInfo = this.columnGroups.get(groupName);\n            const column = new Column({\n                id: '_group',\n                palette: groupInfo.palette\n            }, [1]);\n            assignPalettes([column], this.palettes);\n            const lastCol = group[group.length - 1];\n            const groupStart = group[0].offset;\n            const groupEnd = lastCol.offset + lastCol.widthPx + P.geomPadding;\n            const fill = column.palette == 'none' && 'transparent' || column.palette(0.5);\n            const rect = groups.append('rect')\n                .attr('x', groupStart)\n                .attr('y', 0)\n                .attr('width', groupEnd - groupStart)\n                .attr('height', P.rowHeight)\n                .attr('fill', fill)\n                .attr('opacity', 0.25);\n            const text = groups.append('text')\n                .attr('x', groupStart + (groupEnd - groupStart) / 2)\n                .attr('y', P.rowHeight / 2)\n                .attr('text-anchor', 'middle')\n                .attr('dominant-baseline', 'central')\n                .attr('fill', O.theme.headerColor)\n                .text(groupInfo.level1);\n            if (O.fontSize) {\n                text.attr('font-size', O.fontSize);\n            }\n            const { width } = text.node().getBBox();\n            if (width + 2 * P.padding > groupEnd - groupStart) {\n                const diff = width + 2 * P.padding - (groupEnd - groupStart);\n                rect.attr('width', width + 2 * P.padding);\n                rect.attr('x', groupStart - diff / 2);\n            }\n            if (O.labelGroupsAbc) {\n                const letter = String.fromCharCode(\"a\".charCodeAt(0) + abcCounter);\n                const text = groups.append('text')\n                    .attr('x', groupStart + P.padding)\n                    .attr('y', P.rowHeight / 2)\n                    .attr('dominant-baseline', 'central')\n                    .attr('fill', O.theme.headerColor)\n                    .text(`${letter})`);\n                if (O.fontSize) {\n                    text.attr('font-size', O.fontSize);\n                }\n            }\n            abcCounter += 1;\n        });\n\n        this.columnInfo.forEach((column, i) => {\n            const el = labels.append('g')\n                .attr('transform', `rotate(${-P.colAnnotAngle})`)\n                .classed(`column-${i}`, true);\n            el.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('font-size', O.fontSize)\n                .style('fill', O.theme.textColor)\n                .style('cursor', 'pointer')\n                .datum(column)\n                .on('click', this.onColumnClick.bind(this))\n                .on('mouseenter', () => {\n                    el.style('text-decoration', 'underline dashed')\n                        .style('fill', O.theme.hoverColor)\n                })\n                .on('mouseleave', () => {\n                    el.style('text-decoration', '').style('fill', O.theme.textColor)\n                })\n                .text(column.name);\n            const nativeWidth = el.node().getBBox().width;\n            if (!nonZeroRotate && nativeWidth < column.widthPx - 2 * P.padding) {\n                column.rotate = false;\n            } else {\n                column.rotate = true;\n                nonZeroRotate = true;\n            }\n            const { width, height } = el.node().getBoundingClientRect();\n            if (height > headerHeight) {\n                headerHeight = height;\n            }\n            if (column.offset + column.widthPx / 2 + width > bodyWidth) {\n                bodyWidth = column.offset + column.widthPx / 2 + width + P.padding;\n            }\n        });\n        this.columnInfo.forEach((column, i) => {\n            let center = column.offset + column.widthPx / 2;\n            let rotate = column.rotate ? -P.colAnnotAngle : 0;\n            this.header.select(`.column-${i}`)\n                .attr(\n                    'transform',\n                    `translate(${center}, ${headerHeight - 2 * P.padding}) rotate(${rotate})`\n                );\n            if (!column.rotate) {\n                labels.select(`.column-${i} text`)\n                    .attr('text-anchor', 'middle');\n            } else {\n                labels.append('line')\n                    .attr('x1', center)\n                    .attr('x2', center)\n                    .attr('y1', headerHeight - 2)\n                    .attr('y2', headerHeight - 2 - P.padding)\n                    .attr('stroke', O.theme.strokeColor);\n            }\n        });\n        P.width = bodyWidth;\n        P.headerHeight = headerHeight + P.rowHeight + P.colAnnotOffset;\n    }\n\n    renderLegends() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        // go through this.legends and render them sequentially\n\n        let footerHeight = 0;\n        const legendEl = this.footer.append('g');\n        let legendXOffset = 0;\n        let offset = 0;\n        let funkyrectPresent = false;\n\n        this.legends.forEach(legend => {\n            if (!legend.enabled) {\n                return;\n            }\n            const rowHeight = O.legendFontSize;\n            let offsetY = rowHeight * 2 + P.padding;\n            const el = legendEl.append('g');\n            el.attr('transform', `translate(${offset}, 0)`);\n            el.append('text')\n                .attr('x', 0)\n                .attr('y', offsetY)\n                .attr('font-size', O.legendFontSize)\n                .style('fill', O.theme.textColor)\n                .text(legend.title);\n\n            if (legend.geom === 'text') {\n                let labelsWidth = 0;\n                legend.labels.forEach((label, i) => {\n                    const txt = el.append('text')\n                        .attr('x', P.padding)\n                        .attr('y', offsetY + (i + 1) * (rowHeight + P.padding))\n                        .attr('font-size', O.legendFontSize)\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    const { width } = txt.node().getBBox();\n                    if (width > labelsWidth) {\n                        labelsWidth = width;\n                    }\n                });\n                legend.values.forEach((value, i) => {\n                    el.append('text')\n                        .attr('x', P.padding * 2 + labelsWidth)\n                        .attr('y', offsetY + (i + 1) * (rowHeight + P.padding))\n                        .attr('font-size', O.legendFontSize)\n                        .style('fill', O.theme.textColor)\n                        .text(value);\n                });\n            }\n            if (legend.geom === 'rect') {\n                let myOffset = 0;\n                legend.values.forEach((colorValue, i) => {\n                    const label = legend.labels[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.rect(size, colorValue, legend, O, P);\n                    geom.attr('transform', `translate(${myOffset}, ${offsetY + P.padding})`);\n                    el.append(() => geom.node());\n                    let x = myOffset;\n                    let textAnchor = 'start';\n                    if (legend.label_align === 'center') {\n                        x += P.rowHeight / 2;\n                        textAnchor = 'middle';\n                    } else if (legend.label_align === 'right') {\n                        x += P.rowHeight;\n                        textAnchor = 'end';\n                    }\n                    el.append('text')\n                        .attr('x', x)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', textAnchor)\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += P.geomSize + P.padding;\n                });\n            }\n            if (legend.geom === 'funkyrect') {\n                let myOffset = 0;\n                legend.labels.forEach((label, i) => {\n                    const colorValue = legend.values[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.funkyrect(size, colorValue, legend, O, P);\n                    el.append(() => geom.node());\n                    const { width: geomWidth, height: geomHeight } = geom.node().getBBox();\n                    geom.attr(\n                        'transform',\n                        `translate(${myOffset}, ${offsetY + P.rowHeight / 2 - geomHeight / 2})`\n                    );\n                    let x = myOffset + P.rowHeight / 2 - geomWidth / 2;\n                    let textAnchor = 'start';\n                    if (legend.label_align === 'center') {\n                        x += geomWidth / 2;\n                        textAnchor = 'middle';\n                    } else if (legend.label_align === 'right') {\n                        x += geomWidth;\n                        textAnchor = 'end';\n                    }\n                    el.append('text')\n                        .attr('x', x)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', textAnchor)\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += geomWidth + P.padding;\n                });\n            }\n            if (legend.geom === 'circle') {\n                let myOffset = 0;\n                legend.labels.forEach((label, i) => {\n                    const colorValue = legend.values[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.circle(size, colorValue, legend, O, P);\n                    el.append(() => geom.node());\n                    const { width: geomWidth, height: geomHeight } = geom.node().getBBox();\n                    geom.attr(\n                        'transform',\n                        `translate(${myOffset}, ${offsetY + P.rowHeight / 2 - geomHeight / 2})`\n                    );\n                    let x = myOffset + P.rowHeight / 2 - geomWidth / 2;\n                    let textAnchor = 'start';\n                    if (legend.label_align === 'center') {\n                        x += geomWidth / 2;\n                        textAnchor = 'middle';\n                    } else if (legend.label_align === 'right') {\n                        x += geomWidth;\n                        textAnchor = 'end';\n                    }\n                    el.append('text')\n                        .attr('x', x)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', textAnchor)\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += geomWidth + P.padding;\n                });\n            }\n            if (legend.geom === 'bar') {\n                const colors = legend.palette.range();\n\n                const grad = this.svg.append('defs')\n                    .append('linearGradient')\n                    .attr('id', `grad_${legend.paletteName}`)\n                    .attr('x1', '0%')\n                    .attr('x2', '100%')\n                    .attr('y1', '0%')\n                    .attr('y2', '0%');\n\n                grad.selectAll('stop')\n                    .data(colors)\n                    .enter()\n                    .append('stop')\n                    .style('stop-color', function(d) { return d; })\n                    .attr('offset', function(d, i) {\n                        return 100 * (i / (colors.length - 1)) + '%';\n                    });\n\n                // A bit ugly to get the width of the column mapped to this legend\n                const col = this.columnInfo.filter((column) =>\n                    column.geom === 'bar' && column.paletteName === legend.paletteName\n                )[0];\n\n                el.append('rect')\n                    .attr('x', P.padding)\n                    .attr('y', offsetY + P.padding)\n                    .attr('width', col.widthPx)\n                    .attr('height', P.rowHeight)\n                    .style('fill', `url(#grad_${legend.paletteName})`)\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 0.5);\n\n                legend.labels.forEach((label, i) => {\n                    if (label === '') {\n                        return;\n                    }\n                    const value = legend.values[i];\n                    const xPos = P.padding + col.widthPx * value;\n                    if (value > 0 && value < 1) {\n                        el.append('line')\n                            .attr('x1', xPos)\n                            .attr('x2', xPos)\n                            .attr('y1', offsetY + P.rowHeight + P.padding)\n                            .attr('y2', offsetY + P.rowHeight)\n                            .attr('stroke', 'black')\n                            .attr('stroke-width', 0.5);\n                    }\n                    el.append('text')\n                        .attr('x', xPos)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'middle')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                });\n            }\n            if (legend.geom === 'image') {\n                legend.values.forEach((value, i) => {\n                    const label = legend.labels[i];\n                    const img = GEOMS.image(value, null, {width: legend.size[i]}, O, P);\n                    img.attr('transform', `translate(0, ${offsetY + P.padding})`);\n                    el.append(() => img.node());\n                    const { width: imgWidth, height: imgHeight } = img.node().getBBox();\n                    el.append('text')\n                        .attr('x', imgWidth + P.padding)\n                        .attr('y', offsetY + P.padding + imgHeight / 2)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'left')\n                        .attr('dominant-baseline', 'central')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    offsetY += imgHeight + P.padding;\n                });\n            }\n            if (legend.geom === 'pie') {\n                const arcs = d3.pie().endAngle(Math.PI)(Array(legend.palette.colorNames.length).fill(1));\n                const g = el.append('g');\n                g.attr('transform', `translate(0, ${offsetY + P.padding + P.rowHeight})`);\n                g.selectAll('arcs')\n                    .data(arcs)\n                    .enter()\n                    .append('path')\n                        .attr('d', d3.arc().innerRadius(0).outerRadius(P.geomSize / 2))\n                        .attr('fill', (_, i) => {\n                            return legend.palette(i);\n                        })\n                        .style('stroke', O.theme.strokeColor)\n                        .style('stroke-width', 1)\n                        .attr('transform', `translate(${P.geomSize / 2 + P.geomPadding - 0.5}, 0)`);\n\n                g.selectAll('text')\n                    .data(arcs)\n                    .enter()\n                    .append('text')\n                    .text((_, i) => legend.palette.colorNames[i])\n                    .attr('font-size', O.legendFontSize)\n                    .attr('dominant-baseline', 'central')\n                    .style('fill', O.theme.textColor)\n                    .attr('transform', d => {\n                        const p = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize).centroid(d);\n                        p[0] += P.geomSize / 2 + 4 * P.geomPadding;\n                        return `translate(${p})`;\n                    });\n\n                g.selectAll('lines')\n                    .data(arcs)\n                    .enter()\n                    .append('path')\n                        .attr('d', d => {\n                            const p1 = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize / 2 + 5).centroid(d);\n                            const p2 = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize - 5).centroid(d);\n                            p1[0] += P.geomSize / 2 + P.geomPadding;\n                            p2[0] += P.geomSize / 2 + 3 * P.geomPadding;\n                            return d3.line()([p1, p2]);\n                        })\n                        .style('stroke', O.theme.strokeColor)\n                        .style('stroke-width', 0.5);\n            }\n\n            const { width } = el.node().getBBox();\n            offset += width + P.padding * 2;\n        });\n\n        const { height } = legendEl.node().getBBox();\n        if (height > footerHeight) {\n            footerHeight = height;\n        }\n        let legendWidth = offset - P.padding;\n        if (funkyrectPresent) {\n            legendWidth += P.geomSize;\n        }\n        if (legendXOffset + legendWidth > P.width) {\n            if (legendWidth <= P.width) { // try to right-justify the legend\n                legendXOffset = P.width - legendWidth;\n            } else {\n                legendXOffset = 0;\n                P.width = offset;\n            }\n        }\n        P.footerOffset = legendXOffset;\n        P.footerHeight = footerHeight + P.rowHeight;\n    }\n\n    hideTooltip() {\n        if (this.tooltip) {\n            this.tooltip.style(\"display\", \"none\");\n        }\n    }\n\n    showTooltip(mouse, text) {\n        if (this.tooltip === undefined) {\n            this.tooltip = d3.select(\"body\")\n                .append(\"div\")\n                    .style(\"z-index\", 2000)\n                    .style(\"position\", \"absolute\")\n                    .style(\"background-color\", \"#333\")\n                    .style(\"color\", \"white\")\n                    .style(\"border\", \"solid\")\n                    .style(\"border-width\", \"1px\")\n                    .style(\"border-radius\", \"5px\")\n                    .style(\"padding\", \"3px 5px\")\n                    .style(\"display\", \"none\");\n        }\n\n        const offset = 10;\n        this.tooltip\n            .html(text)\n            .style(\"top\", mouse[1] + 2 * offset + \"px\")\n            .style(\"left\", mouse[0] + offset + \"px\")\n            .style(\"display\", \"block\");\n    }\n\n    onMouseMove(e) {\n        if (e.target) {\n            let el = d3.select(e.target);\n            while (el.classed('fh-geom') === false && el.node() != this.svg.node()) {\n                el = d3.select(el.node().parentNode);\n            }\n            const d = el.datum();\n            if (d && d.tooltip) {\n                const mouse = d3.pointer(e, document.body);\n                this.showTooltip(mouse, d.tooltip);\n                return;\n            }\n        }\n        this.hideTooltip();\n    }\n\n    onColumnClick(e) {\n        const el = d3.select(e.target);\n        const elBox = el.node().getBBox();\n        const column = el.datum();\n        const comparator = column.sort();\n        let data = d3.group(this.data, d => d[this.rowGroupKey]);\n        data = [].concat(...this.rowGroupOrder.map(group => d3.sort(data.get(group), (a, b) => {\n            [a, b] = [a[column.id], b[column.id]];\n            if (column.numeric) {\n                [a, b] = [+a, +b];\n            }\n            return comparator(a, b);\n        })));\n        this.data = data;\n        this.svg.selectChildren().remove();\n        this.render();\n\n        this.indicateSort(column, elBox);\n    }\n\n    indicateSort(column, labelBox) {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        this.sortIndicator = this.header.append(\"text\")\n            .attr('font-size', 12)\n            .attr('fill', O.theme.hoverColor);\n        if (column.sortState === \"asc\") {\n            this.sortIndicator.text('↑');\n        } else {\n            this.sortIndicator.text('↓');\n        }\n        this.sortIndicator\n            .attr('text-anchor', 'right')\n            .attr('dominant-baseline', 'text-bottom');\n        let x = column.offset + column.widthPx / 2 - 2 * P.padding;\n        let y = P.headerHeight - P.padding;\n        if (!column.rotate) {\n            x -= labelBox.width / 2;\n            y -= labelBox.height / 2;\n            this.sortIndicator.attr('dominant-baseline', 'central');\n        }\n        this.sortIndicator\n            .attr('x', x)\n            .attr('y', y);\n    }\n\n    render() {\n        this.header = this.svg.append(\"g\");\n        this.body = this.svg.append(\"g\");\n        this.footer = this.svg.append(\"g\");\n\n        this.renderStripedRows();\n        this.renderData();\n        this.renderHeader();\n        this.renderLegends();\n\n        const O = this.options;\n        const P = this.positionArgs;\n\n        this.svg.attr('width', P.width);\n        this.svg.attr('height', P.bodyHeight + P.headerHeight + P.footerHeight);\n        if (this.renderGroups) {\n            this.header.attr('transform', `translate(0, ${P.rowHeight})`);\n        }\n        this.body.selectAll('.row').attr('width', P.bodyWidth);\n        this.body.attr(\"transform\", `translate(0, ${P.headerHeight})`);\n        this.footer.attr('transform', `translate(${P.footerOffset}, ${P.headerHeight + P.bodyHeight})`);\n        this.svg.attr('style', '');\n        if (O.rootStyle) {\n            this.svg.attr('style', O.rootStyle);\n        }\n    }\n\n    listen() {\n        this.svg.on(\"mousemove\", this.onMouseMove.bind(this));\n    }\n};\n\n\n/**\n * The main entry point for the library. Takes data and various configuration options and returns\n * an SVG element with the heatmap.\n *\n * @param {ColumnData|RowData} data - data to plot, usually d3-fetch output\n * @param {ColumnData|module:columns~ColumnInfo[]} columnInfo - information about how the columns\n *   should be displayed. If not specified, all columns from `data` will be displayed.\n *   See {@link module:columns~ColumnInfo}, {@link module:columns.Column}\n * @param {ColumnData|RowData} rowInfo - information about how the rows should be displayed\n * @param {ColumnData|RowData} columnGroups - information about how to group columns\n * @param {ColumnData|RowData} rowGroups - information about how to group rows\n * @param {module:palettes~PaletteMapping} palettes - mapping of names to palette colors\n * @param {ColumnData|RowData} legends - a list of legends to add to the plot\n * @param {Object} positionArgs - positioning arguments, see {@link PositionArgs}\n * @param {HeatmapOptions} options - options for the heatmap, see {@link HeatmapOptions}\n * @param {boolean} scaleColumn - whether to apply min-max scaling to numerical\n *   columns. Defaults to true\n *\n * @returns {SVGElement} - the SVG element containing the heatmap\n *\n */\nfunction funkyheatmap(\n    data,\n    columnInfo,\n    rowInfo = [],\n    columnGroups = [],\n    rowGroups = [],\n    palettes = {},\n    legends = [],\n    positionArgs = {},\n    options = {},\n    scaleColumn = true\n) {\n    [data, columnInfo, columnGroups, rowInfo, rowGroups, legends] = ensureRowData(\n        data, columnInfo, columnGroups, rowInfo, rowGroups, legends\n    );\n    columnInfo = buildColumnInfo(data, columnInfo, scaleColumn, options.colorByRank);\n    columnGroups = buildColumnGroups(columnGroups, columnInfo);\n    legends = prepareLegends(legends, palettes, columnInfo);\n    assignPalettes(columnInfo, palettes);\n    assignPalettes(legends, palettes);\n\n    const svg = d3.select('body')\n        .append('svg')\n            .classed('funkyheatmap', true)\n            .style('visibility', 'hidden')\n            .style('position', 'absolute')\n            .style('left', '-2000px');\n    const heatmap = new FunkyHeatmap(\n        data,\n        columnInfo,\n        columnGroups,\n        rowInfo,\n        rowGroups,\n        palettes,\n        legends,\n        positionArgs,\n        options,\n        svg\n    );\n    heatmap.render();\n    heatmap.listen();\n    heatmap.svg.remove();\n\n    return heatmap.svg.node();\n}\n\nexport default funkyheatmap;\n","module.exports=_;","/** @module */\n\n/**\n * Converts object-based dataframe to array-based dataframe.\n *\n * @param {ColumnData} data - an object with each property representing dataframe column as an array.\n *   Columns are of the same length\n * @returns {RowData} - array of objects with properties corresponding to columns\n */\nexport function colToRowData(data) {\n    const columns = Object.getOwnPropertyNames(data);\n    const size = data[columns[0]].length;\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        let item = {};\n        for (let column of columns) {\n            item[column] = data[column][i];\n        }\n        result.push(item);\n    }\n    return result;\n};\n\n/**\n * Converts array-based dataframe to object-based dataframe.\n *\n * @param {RowData} data - an array of objects with properties\n * @returns {ColumnData} - object with each property representing dataframe column as an array,\n *   values are preserved in the same order as in the input array\n */\nexport function rowToColData(data) {\n    const result = {};\n    const columns = Object.getOwnPropertyNames(data[0]);\n    for (let column of columns) {\n        result[column] = data.map(item => item[column]);\n    }\n    return result;\n};\n\n/**\n * Convenience function to convert potential column-based dataframes to row-based dataframes.\n *\n * @param  {Object[]} objects - potential objects to convert to row-based dataframes. Only converts\n *   objects, skips arrays\n * @returns {Object[]} - array of converted objects\n */\nexport function ensureRowData(...objects) {\n    return objects.map(obj => {\n        if (obj && !Array.isArray(obj)) {\n            obj = colToRowData(obj);\n        }\n        return obj;\n    });\n};\n","/** @module  */\n\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport { rowToColData } from './input_util';\n\n/**\n * @typedef {Object} ColumnInfo\n * @description Information about a dataframe column and how to display it.\n * @property {string} id - column id in the dataset. Required\n * @property {string} name - name of the column to display above the column\n * @property {string} group - name of the group the column belongs to\n * @property {string} id_size - id of the column that will determine the size for display\n * @property {string} id_color - id of the column that will determine the color for display\n * @property {boolean} colorByRank - whether to color by rank per column instead of by value\n * @property {boolean} scaleColumn - whether to scale the column data to `[0, 1]`\n * @property {string} label - id of the column that has the values to display as labels over\n *   the geoms\n * @property {string} id_label - synonym for `label`\n * @property {string} id_hover_text - id of the column that has the values to display as hover text\n * @property {string} geom - type of the geom to display. Default is `funkyrect` for numerical data,\n *   and `text` for categorical data\n * @property {string} palette - name of the palette to use for coloring the column\n * @property {number} width - width of the column, only used for `bar` and `image` geoms\n * @property {Object} options - additional options for the column\n * @property {string} options.palette - synonym for `palette`\n * @property {number} options.width - synonym for `width`\n * @property {boolean} options.drawGuide - whether to draw a guide at maximum for the bar geom\n *   column\n * @property {boolean} options.draw_outline - synonym for `options.drawGuide`\n */\n\n/**\n * @class\n * @property {string} id - column id in the dataset\n * @property {boolean} numeric - whether the column is numeric, computed from the data.\n *   See {@link module:columns~isNumeric} for details.\n * @property {boolean} categorical - whether the column is categorical, computed from the data\n * @property {string} name - name of the column to display above the column\n * @property {string} group - name of the group the column belongs to\n * @property {string} id_size - id of the column that will determine the size for display\n * @property {string} id_color - id of the column that will determine the color for display\n * @property {boolean} colorByRank - whether to color by rank per column instead of by value\n * @property {boolean} scaleColumn - whether to scale the column data to `[0, 1]`\n * @property {string} label - id of the column that has the values to display as labels over the\n *   geoms\n * @property {string} id_hover_text - id of the column that has the values to display as hover text\n * @property {string} geom - type of the geom to display\n */\nexport class Column {\n    /**\n     * Initialize a column with checks, defaults, and stats calculation.\n     *\n     * @param {module:columns~ColumnInfo} info - column configuration\n     * @param {Array} data - array of data for the column\n     * @param {string[]} columnNames - names of the columns in the dataset, to do cross-checks\n     */\n    constructor(info, data, columnNames) {\n        ({\n            id: this.id,\n            name: this.name,\n            group: this.group,\n            id_size: this.id_size,\n            id_color: this.id_color,\n            colorByRank: this.colorByRank,\n            scaleColumn: this.scaleColumn,\n            label: this.label,\n            id_hover_text: this.id_hover_text,\n            geom: this.geom,\n            palette: this.palette,\n            width: this.width,\n            options: this.options\n        } = info);\n        this.data = data;\n\n        // defaults\n        this.colorByRank = this.colorByRank || false;\n        this.label = this.label || info.id_label;\n\n        const value = data[0];\n        // geoms text and pie are always categorical\n        if (isNumeric(value) && this.geom !== 'text' && this.geom !== 'pie') {\n            this.numeric = true;\n            this.categorical = false;\n            this.data = this.data.map(d => +d);\n        } else {\n            this.numeric = false;\n            this.categorical = true;\n            // disable numerical options for categorical data\n            this.colorByRank = false;\n            this.scaleColumn = false;\n        }\n\n        if (this.name === undefined) {\n            this.name = this.id;\n        }\n\n        if (this.options === undefined) {\n            this.options = {};\n        }\n\n        if (this.options.width !== undefined && this.width === undefined) {\n            this.width = this.options.width;\n        }\n        if (this.options.palette !== undefined && this.palette === undefined) {\n            this.palette = this.options.palette;\n        }\n\n        if (this.geom === undefined) {\n            if (this.numeric) {\n                this.geom = 'funkyrect';\n            } else {\n                this.geom = 'text';\n            }\n        }\n\n        if (this.palette === undefined) {\n            if (this.geom === 'pie') {\n                this.palette = 'categorical';\n            }\n            if (this.numeric) {\n                this.palette = 'numerical';\n            }\n        }\n\n        if (this.width === undefined) {\n            if (this.geom === 'bar') {\n                this.width = 4;\n            }\n        }\n\n        if (this.geom === 'image' && this.width === undefined) {\n            throw `Please, specify width for column with geom=image`;\n        }\n        if (this.geom === 'bar' && this.options.draw_outline !== undefined) {\n            this.options.drawGuide = this.options.draw_outline;\n        }\n\n        if (this.label !== undefined && !columnNames.includes(this.label)) {\n            throw `Column ${this.id} has label=${this.label}, which is not in the data`;\n        }\n        if (this.id_color !== undefined && !columnNames.includes(this.id_color)) {\n            throw `Column ${this.id} has id_color=${this.id_color}, which is not in the data`;\n        }\n        if (this.id_size !== undefined && !columnNames.includes(this.id_size)) {\n            throw `Column ${this.id} has id_size=${this.id_size}, which is not in the data`;\n        }\n        if (this.id_hover_text !== undefined && !columnNames.includes(this.id_hover_text)) {\n            throw (\n                `Column ${this.id} has id_hover_text=${this.id_hover_text}, which is not in the data`\n            );\n        }\n\n        this.sortState = null;\n        if (this.numeric) {\n            this.maybeCalculateStats();\n        }\n    }\n\n    maybeCalculateStats() {\n        let extent = [0, 1];\n        if (this.scaleColumn) {\n            extent = d3.extent(this.data);\n        }\n        [this.min, this.max] = extent;\n        this.range = this.max - this.min;\n        this.scale = d3.scaleLinear().domain(extent);\n        if (this.colorByRank) {\n            this.rankedData = d3.rank(this.data);\n            // In case there are ties, d3 will return ranks like [0, 0, 2] skipping rank 1.\n            // So we renormalize the ranks from [0, 2] to [0, 1], and map the colors to the number\n            // of unique ranks only. Otherwise we allocate 3 colors for [0, 0, 2] data, and the\n            // display colors won't fully map the palette.\n            const uniqueRanks = _.uniq(this.rankedData);\n            const rankedRanks = d3.rank(uniqueRanks);\n            this.normalizedRanks = _.zipObject(uniqueRanks, rankedRanks);\n            this.colorScale = d3.scaleLinear().domain([0, uniqueRanks.length - 1]);\n        }\n    }\n\n    /**\n     * Get value for the item, which is size for numeric or display for text/pie.\n     *\n     * @param {Object} item - data item with our column\n     * @returns {number|string|number[]} - value for sizing or displaying the item\n     */\n    getValue(item) {\n        if (this.id_size !== undefined) {\n            return item[this.id_size];\n        }\n        if (this.numeric) {\n            return +item[this.id];\n        }\n        return item[this.id];\n    }\n\n    /**\n     * Get value for coloring the item.\n     *\n     * @param {Object} item - data item with our column\n     * @param {number} itemPos - data item position in the dataframe. Needed for getting the rank\n     *   with ties.\n     * @returns {number|string} - value for coloring the item\n     */\n    getColorValue(item, itemPos) {\n        if (this.id_color !== undefined) {\n            return item[this.id_color];\n        }\n        if (this.colorByRank) {\n            const rank = this.rankedData[itemPos];\n            const normalizedRank = this.normalizedRanks[rank];\n            return normalizedRank;\n        }\n        return item[this.id];\n    }\n\n    /**\n     * Get text to display in a tooltip over the geom when mouse hovers it.\n     *\n     * @param {Object} item - data item with our column\n     * @param {number} floatPrecision - number of decimal places to display for float values\n     * @returns {string} - text to display in tooltip when mouse hovers the geom\n     */\n    getHoverText(item, floatPrecision) {\n        if (['text', 'image'].includes(this.geom) && this.id_hover_text === undefined) {\n            return;\n        }\n        let value = item[this.id];\n        if (this.id_hover_text !== undefined) {\n            value = item[this.id_hover_text];\n        }\n        if (this.numeric) {\n            value = +value;\n        }\n        if (_.isNumber(value) && !_.isInteger(value)) {\n            return value.toFixed(floatPrecision);\n        }\n        return `${value}`;\n    }\n\n    sort() {\n        if (this.sortState === \"desc\") {\n            this.sortState = \"asc\";\n            return d3.ascending;\n        }\n        this.sortState = \"desc\";\n        return d3.descending;\n    }\n}\n\n/**\n * Assemble all column information needed for drawing\n *\n * @param {RowData} data - dataset\n * @param {module:columns~ColumnInfo[]} columnInfo - properties of the columns for drawing, which\n *   will by modified in place\n * @param {boolean} scaleColumn - whether to min-max scale data for column, default for all columns\n * @param {boolean} colorByRank - whether to color by rank instead of by value, default for all\n *   columns\n */\nexport function buildColumnInfo(data, columnInfo, scaleColumn, colorByRank) {\n    const colData = rowToColData(data);\n    const columnNames = Object.getOwnPropertyNames(colData);\n    if (columnInfo === undefined || columnInfo.length === 0) {\n        console.info(\"No column info specified, assuming all columns are to be displayed.\");\n        columnInfo = Object.getOwnPropertyNames(colData).map(id => {\n            return {id: id}\n        });\n    }\n    if (colorByRank) {\n        columnInfo.forEach(info => {\n            info.colorByRank === undefined && (info.colorByRank = true);\n        });\n    }\n    if (scaleColumn) {\n        columnInfo.forEach(info => {\n            info.scaleColumn === undefined && (info.scaleColumn = true);\n        });\n    }\n    return columnInfo.map(info => {\n        let column = info.id;\n        if (column === undefined) {\n            throw \"Column info must have id field corresponding to the column in the data\";\n        }\n        return new Column(info, colData[column], columnNames);\n    });\n};\n\n/**\n * Check and prepare column group information\n *\n * @param {Object[]} columnGroups - information about column groups, empty array if not specified\n * @param {Object[]} columnInfo - information about columns, to crosscheck\n * @returns {Object[]} - column groups with defaults filled in, if necessary\n */\nexport function buildColumnGroups(columnGroups, columnInfo) {\n    if (columnGroups.length === 0 && columnInfo.some(i => i.group)) {\n        console.info(\"No column groups specified, but some columns have group, building automatically\");\n        columnGroups = columnInfo\n            .filter(i => i.group)\n            .map(i => i.group);\n        columnGroups = [...new Set(columnGroups)];\n        columnGroups = columnGroups.map(group => {\n            return {group: group}\n        });\n    }\n    if (columnGroups.length === 0) {\n        return [];\n    }\n    columnInfo.forEach(i => {\n        if (i.group && !columnGroups.some(g => g.group === i.group)) {\n            throw `Column group ${i.group} is not specified in columnGroups`;\n        }\n    });\n    let allGroups = columnInfo.filter(i => i.group).map(i => i.group);\n    let unused = columnGroups.filter(i => !allGroups.includes(i.group));\n    if (unused.length > 0) {\n        console.warn(`Unused column groups: ${unused.map(i => i.group).join(', ')}`);\n    }\n\n    if (columnGroups[0].palette === undefined) {\n        console.info(\"Column groups did not specify `palette`. Assuming no colours\")\n        columnGroups.forEach(i => {\n            i.palette = 'none';\n        });\n    }\n    columnGroups.forEach(i => {\n        if (i.palette === undefined) {\n            throw `Column group ${i.group} did not specify palette`;\n        }\n    });\n\n    if (columnGroups[0].level1 === undefined) {\n        console.info(\"Column groups did not specify `level1`. Using group id as level1\")\n        columnGroups.forEach(i => {\n            i.level1 = i.group.charAt(0).toUpperCase() + i.group.slice(1);\n        });\n    }\n\n    return columnGroups;\n};\n\n/**\n * Test if a value is a number, including strings that can be coerced to a number.\n *\n * @param {*} str - value to test\n * @returns {boolean} - if the value is a number\n */\nfunction isNumeric(str) {\n    if (typeof str === 'number') return true;\n    if (typeof str !== 'string') return false;\n    // use type coercion to parse the _entirety_ of the string\n    // (`parseFloat` alone does not do this)...\n    return !Number.isNaN(str)\n        && !Number.isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n}\n","/** @module */\n\nimport * as d3 from 'd3';\n\n/**\n * @typedef {Object} CustomPalette\n * @property {string[]} colors - list of colors\n * @property {string[]} names - list of names for the colors, in the same order\n * @description A custom palette specification. This is important for categorical data: the names\n *   are used as labels in the legend for `pie` geom, for `text` geom the values are mapped to\n *   colors based on the names.\n */\n\n/**\n * @typedef {string|string[]|module:palettes~CustomPalette} Palette\n * @description A palette specification.\n */\n\n/**\n * @typedef {Object.<string, module:palettes~Palette>} PaletteMapping\n * @description Mapping of names to palette colors. For palette colors the possible options are:\n *   - name of a built-in palette (e.g. `Blues`, `Set1`, etc.). See {@link module:palettes~defaultPalettes}\n *   - `Array.<string>` of custom colors as strings\n *   - {@link module:palettes~CustomPalette} array of named colors, important for categorical data\n */\n\n/**\n * Default palettes for numerical and categorical data. See source for the colors.\n * @constant {Object}\n * @property {Object} numerical - palettes for numerical data. Default is `Blues`. See\n *   {@link module:palettes~numerical}\n * @property {Object} categorical - palettes for categorical data. Default is `Set1`. See\n *   {@link module:palettes~categorical}\n */\nconst defaultPalettes = {\n    numerical:\n    /**\n     * @member numerical\n     * @property {string[]} Blues - <div class=\"inline-pal-preview\" style=\"background: #011636\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #08306B\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #08519C\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #2171B5\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #4292C6\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #6BAED6\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #9ECAE1\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #C6DBEF\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #DEEBF7\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #F7FBFF\"></div>&nbsp;. Default for\n     *   numerical data\n     * @property {string[]} Greens - <div class=\"inline-pal-preview\" style=\"background: #00250f\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #00441B\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #006D2C\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #238B45\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #41AB5D\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #74C476\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #A1D99B\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #C7E9C0\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #E5F5E0\"></div>\n     * @property {string[]} Greys - <div class=\"inline-pal-preview\" style=\"background: #000000\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #252525\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #525252\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #737373\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #969696\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #BDBDBD\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #D9D9D9\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #F0F0F0\"></div>\n     * @property {string[]} Reds - <div class=\"inline-pal-preview\" style=\"background: #CB181D\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #EF3B2C\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FB6A4A\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FC9272\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FCBBA1\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FEE0D2\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFF5F0\"></div>\n     * @property {string[]} YlOrBr - <div class=\"inline-pal-preview\" style=\"background: #EC7014\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FE9929\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FEC44F\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FEE391\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFF7BC\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFFFE5\"></div>\n     */\n    {\n        Blues: [\n            \"#011636\", \"#08306B\", \"#08519C\", \"#2171B5\", \"#4292C6\", \"#6BAED6\", \"#9ECAE1\", \"#C6DBEF\",\n            \"#DEEBF7\", \"#F7FBFF\"\n        ],\n        Greens: [\n            \"#00250f\", \"#00441B\", \"#006D2C\", \"#238B45\", \"#41AB5D\", \"#74C476\", \"#A1D99B\", \"#C7E9C0\",\n            \"#E5F5E0\"\n        ],\n        Greys: [\n            \"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#BDBDBD\", \"#D9D9D9\", \"#F0F0F0\"\n        ],\n        Reds: [\n            \"#CB181D\", \"#EF3B2C\", \"#FB6A4A\", \"#FC9272\", \"#FCBBA1\", \"#FEE0D2\", \"#FFF5F0\"\n        ],\n        YlOrBr: [\n            \"#EC7014\", \"#FE9929\", \"#FEC44F\", \"#FEE391\", \"#FFF7BC\", \"#FFFFE5\"\n        ]\n    },\n    categorical:\n    /**\n     * @member categorical\n     * @property {string[]} Set1 - <div class=\"inline-pal-preview\" style=\"background: #E41A1C\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #377EB8\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #4DAF4A\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #984EA3\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FF7F00\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFFF33\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #A65628\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #F781BF\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #999999\"></div>&nbsp;. Default for\n     *   categorical data\n     * @property {string[]} Set2 - <div class=\"inline-pal-preview\" style=\"background: #66C2A5\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FC8D62\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #8DA0CB\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #E78AC3\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #A6D854\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFD92F\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #E5C494\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #B3B3B3\"></div>\n     * @property {string[]} Set3 - <div class=\"inline-pal-preview\" style=\"background: #8DD3C7\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFFFB3\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #BEBADA\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FB8072\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #80B1D3\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FDB462\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #B3DE69\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FCCDE5\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #D9D9D9\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #BC80BD\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #CCEBC5\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #FFED6F\"></div>\n     * @property {string[]} Dark2 - <div class=\"inline-pal-preview\" style=\"background: #1B9E77\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #D95F02\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #7570B3\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #E7298A\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #66A61E\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #E6AB02\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #A6761D\"></div>\n     *   <div class=\"inline-pal-preview\" style=\"background: #666666\"></div>\n     */\n    {\n        Set1: [\n            \"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#984EA3\",\"#FF7F00\",\"#FFFF33\",\"#A65628\",\"#F781BF\",\n            \"#999999\"\n        ],\n        Set2: [\n            \"#66C2A5\",\"#FC8D62\",\"#8DA0CB\",\"#E78AC3\",\"#A6D854\",\"#FFD92F\",\"#E5C494\",\"#B3B3B3\"\n        ],\n        Set3: [\n            \"#8DD3C7\", \"#FFFFB3\", \"#BEBADA\", \"#FB8072\", \"#80B1D3\", \"#FDB462\", \"#B3DE69\", \"#FCCDE5\",\n            \"#D9D9D9\", \"#BC80BD\", \"#CCEBC5\", \"#FFED6F\"\n        ],\n        Dark2: [\n            \"#1B9E77\",\"#D95F02\",\"#7570B3\",\"#E7298A\",\"#66A61E\",\"#E6AB02\",\"#A6761D\",\"#666666\"\n        ]\n    }\n};\n\n/**\n *\n * @param {module:columns.Column[]} columnInfo - array of `Column` objects with information\n * @param {module:palettes~PaletteMapping} palettes - mapping of names to color palettes\n */\nexport function assignPalettes(columnInfo, palettes) {\n    palettes = { numerical: \"Blues\", categorical: \"Set1\", ...palettes };\n    columnInfo.forEach(column => {\n        if (column.palette && column.palette != 'none') {\n            column.paletteName = column.palette;\n            let name = palettes[column.palette];\n            if (name === undefined) { // fallback\n                name = column.palette;\n            }\n            let colors;\n            let colorNames;\n            if (defaultPalettes.numerical[name]) {\n                colors = defaultPalettes.numerical[name];\n            } else if (defaultPalettes.categorical[name]) {\n                colors = defaultPalettes.categorical[name];\n            } else if (Array.isArray(name)) {\n                const item = name[0];\n                if (typeof item === 'string' || item instanceof String) {\n                    colors = name;\n                } else {\n                    throw `Palette definition ${name} is not recognized. Expected are: array of colors, array of color-name pairs.`;\n                }\n            } else if (Array.isArray(name.colors) && Array.isArray(name.names)) {\n                colors = name.colors;\n                colorNames = name.names;\n            } else {\n                const names = [\n                    ...Object.getOwnPropertyNames(defaultPalettes.numerical),\n                    ...Object.getOwnPropertyNames(defaultPalettes.categorical)\n                ];\n                throw `Palette ${name} not defined. Use one of ${names.join(', ')}.`;\n            }\n\n            if (column.numeric) {\n                let scale = column.scale;\n                if (column.colorScale) {\n                    scale = column.colorScale;\n                }\n                const [min, max] = scale.domain();\n                const step = (max - min) / (colors.length - 1);\n                const domain = [...d3.range(min, max, step), max];\n                column.palette = d3.scaleLinear().domain(domain).range(colors);\n            }\n            // TODO: replace with categorical\n            if (column.geom === 'pie' || column.geom === 'text') {\n                let domain = colorNames;\n                if (domain === undefined) {\n                    domain = d3.range(colors.length);\n                }\n                column.palette = d3.scaleOrdinal().domain(domain).range(colors);\n                column.palette.colors = colors;\n                column.palette.colorNames = colorNames;\n            }\n        }\n    });\n};\n","/** @module */\n\nimport * as _ from 'lodash';\n\n/**\n *\n * @param {Object[]|undefined} legends - user provided legend configuration\n * @param {Object} palettes - mapping of names to palette colors\n * @param {Object[]} columnInfo - user provided information on columns\n */\nexport function prepareLegends(legends, palettes, columnInfo) {\n    if (legends === undefined) {\n        console.info('No legends provided, will infer automatically');\n        legends = [];\n    }\n\n    const colInfoPalettes = [];\n    columnInfo.forEach(i => {\n        if (i.palette && colInfoPalettes.indexOf(i.palette) === -1) {\n            colInfoPalettes.push(i.palette);\n        }\n    });\n    const legendPalettes = [];\n    legends.forEach(l => {\n        if (l.palette && legendPalettes.indexOf(l.palette) === -1) {\n            legendPalettes.push(l.palette);\n        }\n    });\n\n    const missingPalettes = _.difference(colInfoPalettes, legendPalettes);\n    if (missingPalettes.length > 0) {\n        let msg = 'These palettes are missing in legends, adding legends for them: ';\n        msg += missingPalettes.join(', ');\n        console.info(msg);\n        missingPalettes.forEach(p => {\n            legends.push({\n                title: p,\n                palette: p,\n                enabled: true,\n            });\n        });\n    }\n\n    legends.forEach(legend => {\n        if (legend.enabled === undefined) {\n            legend.enabled = true;\n        }\n        if (legend.title === undefined) {\n            legend.title = legend.palette;\n        }\n        if (legend.geom === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify geom, copying from column info`);\n            const col = columnInfo.find(i => i.palette === legend.palette);\n            legend.geom = col.geom;\n        }\n        if (legend.labels === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify labels, inferring from column info`);\n            if (legend.geom === 'pie') {\n                const pal = palettes[legend.palette];\n                if (pal.names === undefined) {\n                    console.warn(`Cannot infer labels for legend \\`${legend.title}\\`, please provide color names in palette. Disabling this legend`);\n                    legend.enabled = false;\n                }\n                legend.labels = palettes[legend.palette].names;\n            } else if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n                // TODO: get from default options\n                legend.labels = ['0', '', '0.2', '', '0.4', '', '0.6', '', '0.8', '', '1'];\n            } else if (legend.geom === 'text' || legend.geom === 'image') {\n                console.warn(`Cannot infer labels for legend \\`${legend.title}\\` of type ${legend.geom}, please provide labels. Disabling this legend`);\n                legend.enabled = false;\n            }\n        }\n        if (legend.label_hjust !== undefined) {\n            if (legend.label_hjust === 0) {\n                legend.label_align = 'left';\n                console.info(`Converting label_hjust=0 to label_align=left for legend \\`${legend.title}\\``);\n            } else if (legend.label_hjust === 1) {\n                legend.label_align = 'right';\n                console.info(`Converting label_hjust=1 to label_align=right for legend \\`${legend.title}\\``);\n            } else if (legend.label_hjust === 0.5) {\n                legend.label_align = 'center';\n                console.info(`Converting label_hjust=0.5 to label_align=center for legend \\`${legend.title}\\``);\n            } else {\n                console.warn(`Unsupported value for label_hjust: ${legend.label_hjust} for legend \\`${legend.title}\\`, ignoring. Only 0, 0.5, 1 are supported`);\n            }\n        }\n        if (legend.label_align === undefined) {\n            if (['circle', 'rect', 'funkyrect'].includes(legend.geom)) {\n                legend.label_align = 'center';\n            }\n        }\n        if (!['left', 'right', 'center'].includes(legend.label_align)) {\n            legend.label_align = 'center';\n            console.warn(`Unsupported value for label_align: ${legend.label_align} for legend \\`${legend.title}\\`, ignoring. Only left, center, right are supported`);\n        }\n        if (legend.size === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify size, inferring from column info`);\n            if (legend.geom === 'circle' || legend.geom === 'funkyrect') {\n                legend.size = [...d3.range(0, legend.labels.length - 1).map(\n                    (i) => i / (legend.labels.length - 1)\n                ), 1];\n            } else if (legend.geom === 'rect' || legend.geom === 'bar') {\n                legend.size = 1;\n            } else if (legend.geom === 'image') {\n                throw `Please specify size (width) for image legend \\`${legend.title}\\``;\n            }\n        }\n        if (legend.values === undefined) {\n            if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n                legend.values = [...d3.range(0, legend.labels.length - 1).map(\n                    (i) => i / (legend.labels.length - 1)\n                ), 1];\n            }\n            if (legend.enabled && (legend.geom === 'image' || legend.geom === 'text')) {\n                console.warn(`Cannot infer values for legend \\`${legend.title}\\` of type ${legend.geom}, please provide values. Disabling this legend`);\n                legend.enabled = false;\n            }\n        }\n        if (_.isNumber(legend.size)) {\n            legend.size = Array(legend.labels.length).fill(legend.size);\n        }\n        // TODO: make legend class descend from Column\n        if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n            legend.numeric = true;\n            let extent = [0, 1];\n            [legend.min, legend.max] = extent;\n            legend.range = legend.max - legend.min;\n            legend.scale = d3.scaleLinear().domain(extent);\n        }\n    });\n    return legends;\n}\n","/** @module */\n\nimport * as d3 from 'd3';\n\n\nexport const GEOMS = {\n    text: (value, _, column, O, P) => {\n        let fill = O.theme.textColor;\n        if (column.palette) {\n            fill = column.palette(value);\n        }\n        let align = 'start', x = 0;\n        if (column.options.align === 'center' || column.options.align === 'middle') {\n            align = 'middle';\n            x = P.rowHeight / 2;\n        }\n        if (column.options.align === 'right' || column.options.align === 'end') {\n            align = 'end';\n            x = P.rowHeight - P.padding;\n        }\n        const el = d3.create('svg:text')\n            .attr('dominant-baseline', 'middle')\n            .attr('y', P.rowHeight / 2)\n            .attr('x', x)\n            .attr('text-anchor', align)\n            .style('fill', fill)\n            .text(value);\n        if (O.fontSize) {\n            el.attr('font-size', O.fontSize);\n        }\n        return el;\n    },\n\n    bar: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        let width = value * column.width * P.geomSize;\n        if (width === 0) {\n            width = P.minGeomSize;\n        }\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', width.toFixed(2))\n            .attr('height', P.geomSize)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill);\n    },\n\n    circle: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        let radius = value * P.geomSize / 2;\n        if (radius === 0) {\n            radius = P.minGeomSize;\n        }\n        return d3.create('svg:circle')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('cx', P.rowHeight / 2)\n            .attr('cy', P.rowHeight / 2)\n            .attr('r', radius.toFixed(2));\n    },\n\n    rect: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', P.geomSize)\n            .attr('height', P.geomSize);\n    },\n\n    funkyrect: (value, colorValue, column, O, P) => {\n        let scaled = column.scale(value);\n        const fill = column.palette(colorValue);\n        if (scaled < P.funkyMidpoint) {\n            // transform value to a 0.0 .. 0.5 range\n            value = column.scale.copy()\n                .range([0, 0.5])\n                .domain([column.min, column.min + column.range * P.funkyMidpoint])(value);\n            let radius = (value * 0.9 + 0.1) * P.geomSize - P.geomPadding; // 0.5 for stroke\n            if (radius <= 0) {\n                radius = P.minGeomSize;\n            }\n            return d3.create('svg:circle')\n                .classed('fh-geom', true)\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .style('fill', fill)\n                .attr('cx', P.rowHeight / 2)\n                .attr('cy', P.rowHeight / 2)\n                .attr('r', radius.toFixed(2));\n        }\n        // transform value to a 0.5 .. 1.0 range\n        value = column.scale\n            .copy()\n            .range([0.5, 1])\n            .domain([column.min + column.range * P.funkyMidpoint, column.max])(value);\n        const cornerSize = (0.9 - 0.8 * value) * P.geomSize;\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', P.geomSize)\n            .attr('height', P.geomSize)\n            .attr('rx', cornerSize.toFixed(2))\n            .attr('ry', cornerSize.toFixed(2));\n    },\n\n    pie: (value, _, column, O, P) => {\n        let nonZero = 0;\n        let nonZeroIdx = 0;\n        value.forEach((x, i) => {\n            if (x > 0) {\n                nonZero += 1;\n                nonZeroIdx = i;\n            }\n        });\n        if (nonZero === 1) {\n            const fill = column.palette(nonZeroIdx);\n            return d3.create('svg:circle')\n                .classed('fh-geom', true)\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .style('fill', fill)\n                .attr('cx', P.rowHeight / 2)\n                .attr('cy', P.rowHeight / 2)\n                .attr('r', P.geomSize / 2);\n        }\n\n        const arcs = d3.pie().sortValues(null)(value);\n        const g = d3.create('svg:g');\n        g.classed('fh-geom', true);\n        g.selectAll('arcs')\n            .data(arcs)\n            .enter()\n            .append('path')\n                .attr('d', d3.arc().innerRadius(0).outerRadius(P.geomSize / 2))\n                .attr('fill', (_, i) => {\n                    return column.palette(i);\n                })\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .attr('transform', `translate(${P.rowHeight / 2}, ${P.rowHeight / 2})`);\n        return g;\n    },\n\n    image: function(value, _, column, O, P) {\n        return d3.create('svg:image')\n            .attr('y', P.geomPadding)\n            .attr('href', value)\n            .attr('height', P.geomSize)\n            .attr('width', column.width)\n            .attr('preserveAspectRatio', 'xMidYMid');\n    }\n};\n"],"names":["module","exports","d3","$3gsfO","parcelRequire","$2b6e161c9edcf319$var$DEFAULT_OPTIONS","legendFontSize","legendTicks","labelGroupsAbc","colorByRank","tooltipPrecision","theme","oddRowBackground","evenRowBackground","textColor","strokeColor","headerColor","hoverColor","$2b6e161c9edcf319$var$DEFAULT_POSITION_ARGS","rowHeight","rowSpace","rowBigspace","colWidth","colSpace","colBigspace","colAnnotOffset","colAnnotAngle","padding","minGeomSize","funkyMidpoint","$2b6e161c9edcf319$var$PositionArgs","constructor","args","$32BwG","extend","this","underscoreDeprecatedArgs","deprecatedArgs","key","Object","getOwnPropertyNames","underscore","indexOf","newKey","slice","toUpperCase","push","startsWith","length","msg","join","console","warn","calculate","rowSpacePx","rowBigspacePx","colSpacePx","geomSize","geomPadding","geomPaddingX","$2b6e161c9edcf319$var$FunkyHeatmap","data","columnInfo","columnGroups","rowInfo","rowGroups","palettes","legends","positionArgs","options","svg","rowGroupKey","index","group","merge","calculateOptions","renderGroups","rowGroupOrder","undefined","map","_","forEach","d","i","groupInfo","get","Group","renderStripedRows","O","P","rowGroup","nGroups","colorCounter","body","append","classed","attr","renderData","prevColGroup","offset","bodyHeight","size","column","maxWidth","firstColumn","geom","item","j","width","groupName","$7SRQm","GEOMS","text","node","getBBox","value","getValue","isNaN","numeric","label","colorValue","getColorValue","keys","el","labelColor","hsl","palette","l","g","create","labelX","tooltipValue","getHoverText","datum","tooltip","s2","colorNames","colorName","toFixed","elWidth","select","fontSize","q","drawGuide","widthPx","Math","max","round","bodyWidth","renderHeader","headerHeight","nonZeroRotate","groups","header","labels","abcCounter","$dwZfM","Column","id","$lG5F2","assignPalettes","lastCol","groupStart","groupEnd","fill","rect","level1","diff","letter","String","fromCharCode","charCodeAt","style","on","onColumnClick","bind","name","nativeWidth","rotate","height","getBoundingClientRect","center","renderLegends","footerHeight","legendEl","footer","legendXOffset","legend","enabled","offsetY","title","labelsWidth","txt","values","myOffset","x","textAnchor","label_align","funkyrect","geomWidth","geomHeight","circle","colors","range","paletteName","selectAll","enter","col","filter","xPos","img","image","imgWidth","imgHeight","arcs","pie","endAngle","PI","Array","arc","innerRadius","outerRadius","p","centroid","p1","p2","line","legendWidth","footerOffset","hideTooltip","showTooltip","mouse","html","onMouseMove","e","target","parentNode","pointer","document","elBox","comparator","sort","concat","a","b","selectChildren","remove","render","indicateSort","labelBox","sortIndicator","sortState","y","rootStyle","listen","$2b6e161c9edcf319$export$2e2bcd8739ae039","scaleColumn","$kwarp","ensureRowData","buildColumnInfo","buildColumnGroups","$afEFj","prepareLegends","heatmap","$eefee52b0cc720a2$export$7154591d43bbde2b","result","columns","$eefee52b0cc720a2$export$3ce631e14ef22c91","objects","obj","isArray","$eefee52b0cc720a2$export$a599c028b3176012","$9d9dc732a89d186b$export$816b5d811295e6bc","info","columnNames","id_size","id_color","id_hover_text","id_label","str","Number","parseFloat","categorical","draw_outline","includes","maybeCalculateStats","extent","min","scale","scaleLinear","domain","rankedData","rank","uniqueRanks","$parcel$interopDefault","uniq","rankedRanks","normalizedRanks","zipObject","colorScale","itemPos","floatPrecision","isNumber","isInteger","ascending","descending","$9d9dc732a89d186b$export$caf19947cd7e65b5","colData","rowToColData","$9d9dc732a89d186b$export$e33aac0e3b4702d0","some","Set","allGroups","unused","charAt","$fc81e95648bdd3b9$var$defaultPalettes","numerical","Blues","Greens","Greys","Reds","YlOrBr","Set1","Set2","Set3","Dark2","$fc81e95648bdd3b9$export$e66d39924afea2dc","names","step","scaleOrdinal","$776ad961d55bdd86$export$ba7a034cabddb75f","colInfoPalettes","legendPalettes","missingPalettes","difference","find","label_hjust","$5bd757c5633cec0d$export$848bef37f8dddb4a","align","bar","radius","scaled","copy","cornerSize","nonZero","nonZeroIdx","sortValues"],"version":3,"file":"scIB.5b198635.js.map"}