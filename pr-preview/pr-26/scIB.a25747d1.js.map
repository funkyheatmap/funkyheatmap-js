{"mappings":"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","sources":["d3.js","src/main.js","_.js","src/input_util.js","src/columns.js","src/palettes.js","src/legends.js","src/geoms.js"],"sourcesContent":["module.exports=d3;","import * as d3 from 'd3';\nimport * as _ from 'lodash';\n\nimport { ensureRowData } from './input_util';\nimport { buildColumnInfo, buildColumnGroups, Column } from './columns';\nimport { assignPalettes } from './palettes';\nimport { prepareLegends } from './legends';\nimport { GEOMS } from './geoms';\n\n\n/**\n * @typedef {Object} ColumnData\n * @description A dataframe in column-based format. Each property is a column, represented as an\n *   array. All columns are of the same length.\n * @example\n * {\n *   'model': ['Toyota Corolla', 'Fiat 128', 'Honda Civic'],\n *   'mpg': [33.9, 32.4, 30.4],\n *   'weight': [1.835, 2.2, 1.615]\n * }\n */\n\n/**\n * @typedef {Object[]} RowData\n * @description A dataframe in row-based format. Each element is an object with properties. All\n *   objects have the same properties.\n * @example\n * [\n *   {model: 'Toyota Corolla', mpg: 33.9, weight: 1.835},\n *   {model: 'Fiat 128', mpg: 32.4, weight: 2.2},\n *   {model: 'Honda Civic', mpg: 30.4, weight: 1.615}\n * ]\n */\n\n/**\n * @typedef {Object} HeatmapOptions\n * @property {boolean} [colorByRank=false] - whether to color elements by rank, default for all numeric\n *   columns.\n */\nconst DEFAULT_OPTIONS = {\n    legendFontSize: 12,\n    legendTicks: [0, 0.2, 0.4, 0.6, 0.8, 1],\n    labelGroupsAbc: false,\n    colorByRank: false,\n    theme: {\n        oddRowBackground: 'white',\n        evenRowBackground: '#eee',\n        textColor: 'black',\n        strokeColor: '#555',\n        headerColor: 'black',\n        hoverColor: '#1385cb'\n    }\n};\n\nconst DEFAULT_POSITION_ARGS = {\n    rowHeight: 24,\n    rowSpace: 0.1,\n    rowBigspace: 1,\n    colWidth: 24,\n    colSpace: 0.1,\n    colBigspace: 1,\n    colAnnotOffset: 10,\n    colAnnotAngle: 30,\n    padding: 5,\n    minGeomSize: 0.25,\n    funkyMidpoint: 0.8\n}\n\n/**\n * Positional options for the heatmap.\n *\n * Configurable options:\n * @property {number} rowHeight - height of a heatmap row, in pixels\n * @property {number} rowSpace - space between rows, as a fraction of rowHeight. Twice the padding\n * @property {number} rowBigspace - space between groups of rows, as a fraction of rowHeight\n * @property {number} colSpace - space between columns, as a fraction of rowHeight. Twice the\n *   padding\n * @property {number} colAnnotOffset - offset of column groups from column labels, in pixels\n * @property {number} colAnnotAngle - angle of column labels, in degrees\n * @property {number} padding - padding used in certain places. TODO: document\n * @property {number} minGeomSize - minimum size of a heatmap element, in pixels\n * @property {number} funkyMidpoint - midpoint for funkyrect geom\n *\n * Calculated options:\n * @property {number} rowSpacePx - space between rows, in pixels\n * @property {number} rowBigspacePx - space between groups of rows, in pixels\n * @property {number} colSpacePx - space between columns, in pixels\n * @property {number} geomSize - size of a heatmap element, in pixels\n * @property {number} geomPadding - padding around heatmap elements, in pixels\n * @property {number} geomPaddingX - padding around heatmap elements in the x direction, in pixels\n * @property {number} bodyHeight - height of the heatmap body, in pixels\n * @property {number} bodyWidth - width of the heatmap body, in pixels\n * @property {number} width - width of the heatmap, in pixels, including header and footer\n * @property {number} headerHeight - height of the header, in pixels\n * @property {number} footerHeight - height of the footer, in pixels\n * @property {number} footerOffset - offset of the footer from the left edge of the heatmap, in pixels\n */\nclass PositionArgs {\n    /**\n     * @param {Object} args - object with positional options\n     * @param {number} [args.rowHeight=24] - height of a heatmap row, in pixels\n     * @param {number} [args.rowSpace=0.1] - space between rows, as a fraction of rowHeight.\n     *   Twice the padding\n     * @param {number} [args.rowBigspace=1] - space between groups of rows, as a fraction of\n     *   rowHeight\n     * @param {number} [args.colWidth=24] - width of a heatmap column, in pixels.\n     *   Deprecated, has no effect\n     * @param {number} [args.colSpace=0.1] - space between columns, as a fraction of rowHeight.\n     *   Twice the padding\n     * @param {number} [args.colBigspace=1] - space between groups of columns, as a fraction of\n     *   rowHeight. Currently not used\n     * @param {number} [args.colAnnotOffset=3] - offset of column groups from column labels,\n     *   in pixels\n     * @param {number} [args.colAnnotAngle=30] - angle of column labels, in degrees\n     * @param {number} [args.padding=5] - padding around heatmap elements, in pixels\n     * @param {number} [args.minGeomSize=0.25] - minimum size of a heatmap element, in pixels\n     * @param {number} [args.funkyMidpoint=0.8] - midpoint for funkyrect geom\n     */\n    constructor(args) {\n        _.extend(this, DEFAULT_POSITION_ARGS);\n        _.extend(this, args);\n        let underscoreDeprecatedArgs = [];\n        let deprecatedArgs = [];\n        for (let key of Object.getOwnPropertyNames(args)) {\n            let underscore = key.indexOf('_');\n            if (underscore > -1) {\n                let newKey;\n                while (underscore > -1) {\n                    newKey = key.slice(0, underscore) + key[underscore + 1].toUpperCase() + key.slice(underscore + 2);\n                    underscore = key.indexOf('_', underscore + 1);\n                }\n                this[newKey] = args[key];\n                underscoreDeprecatedArgs.push(key);\n                key = newKey;\n            }\n            if (key.startsWith('expand') || key == 'colWidth') {\n                deprecatedArgs.push(key);\n            }\n        }\n        if (underscoreDeprecatedArgs.length > 0) {\n            let msg = 'Position arguments with underscores were accepted, but are deprecated. Use camelCase instead.';\n            msg += ` Found: ${underscoreDeprecatedArgs.join(', ')}`;\n            console.warn(msg);\n        }\n        if (deprecatedArgs.length > 0) {\n            let msg = 'The following position arguments are deprecated and have no effect: ';\n            msg += deprecatedArgs.join(', ');\n            console.warn(msg);\n        }\n        this.calculate();\n    }\n\n    /**\n     * Pre-calculate needed values based on the options.\n     */\n    calculate() {\n        this.rowSpacePx = this.rowHeight * this.rowSpace;\n        this.rowBigspacePx = this.rowHeight * this.rowBigspace;\n        this.colSpacePx = this.rowHeight * this.colSpace;\n        // assuming square\n        this.geomSize = this.rowHeight - this.rowSpacePx;\n        this.geomPadding = this.rowSpacePx / 2;\n        this.geomPaddingX = this.colSpacePx / 2;\n    }\n}\n\n/**\n * Heatmap class\n * @property {PositionArgs} positionArgs\n */\nclass FunkyHeatmap {\n    constructor(\n        data,\n        columnInfo,\n        columnGroups,\n        rowInfo,\n        rowGroups,\n        palettes,\n        legends,\n        positionArgs,\n        options,\n        svg\n    ) {\n        this.rowGroupKey = '__group';\n\n        this.data = data;\n        this.columnInfo = columnInfo;\n        this.columnGroups = d3.index(columnGroups, group => group.group);\n        this.rowInfo = rowInfo;\n        this.rowGroups = d3.index(rowGroups, group => group.group);\n        this.palettes = palettes;\n        this.legends = legends;\n        this.positionArgs = new PositionArgs(positionArgs);\n        this.options = _.merge(DEFAULT_OPTIONS, options);\n        this.calculateOptions();\n        this.svg = svg;\n    }\n\n    calculateOptions() {\n        this.renderGroups = false;\n\n        this.rowGroupOrder = [];\n        // if we don't have row groups, put all rows in unnamed group\n        if (this.rowInfo.length === 0 || this.rowInfo[0].group === undefined) {\n            this.rowInfo = this.data.map(_ => { return {group: ''} });\n        }\n\n        this.data.forEach((d, i) => {\n            const group = this.rowInfo[i].group;\n            d[this.rowGroupKey] = group;\n            if (this.rowGroupOrder.indexOf(group) === -1) {\n                this.rowGroupOrder.push(group);\n            }\n        });\n        const group = this.rowInfo[0].group\n        const groupInfo = this.rowGroups.get(group);\n        if (groupInfo !== undefined && groupInfo.Group !== undefined) {\n            this.renderGroups = true;\n        }\n    }\n\n    renderStripedRows() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let rowGroup, nGroups = 0, colorCounter = 0;\n        this.data.forEach((d, i) => {\n            if (this.renderGroups && d[this.rowGroupKey] !== rowGroup) {\n                nGroups += 1;\n                colorCounter = 0;\n            }\n            rowGroup = d[this.rowGroupKey];\n            this.body.append('rect')\n                .classed('row', true)\n                .attr('height', P.rowHeight)\n                .attr('x', 0)\n                .attr('y', (i + nGroups) * P.rowHeight)\n                .attr('fill', colorCounter % 2 === 0\n                                ? O.theme.evenRowBackground\n                                : O.theme.oddRowBackground);\n            colorCounter += 1;\n        });\n    }\n\n    renderData() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let offset = 0;\n        P.bodyHeight = this.data.length * P.rowHeight;\n        if (this.renderGroups) {\n            P.bodyHeight += this.rowGroups.size * P.rowHeight;\n        }\n        let prevColGroup;\n\n        this.columnInfo.forEach((column, i) => {\n            let maxWidth = 0;\n            let padding = P.geomPaddingX;\n            let firstColumn = i === 0;\n            if (column.geom === 'text' || column.geom === 'bar') {\n                padding = P.padding;\n            }\n            offset += padding;\n            if (prevColGroup && column.group && prevColGroup !== column.group) {\n                offset += 2 * P.padding;\n            }\n            let rowGroup, nGroups = 0;\n            this.data.forEach((item, j) => {\n                let width = 0;\n                if (this.renderGroups && item[this.rowGroupKey] !== rowGroup) {\n                    nGroups += 1;\n                }\n                if (this.renderGroups && firstColumn && item[this.rowGroupKey] !== rowGroup) {\n                    let groupName = GEOMS.text(\n                        this.rowGroups.get(item[this.rowGroupKey]).Group,\n                        null,\n                        column,\n                        O,\n                        P\n                    );\n                    groupName\n                        .attr('transform', `translate(${offset - padding}, ${(j + nGroups - 1) * P.rowHeight})`)\n                        .attr('font-weight', 'bold')\n                        .attr('dominant-baseline', 'hanging');\n                    this.body.append(() => groupName.node());\n                    width = groupName.node().getBBox().width;\n                }\n                rowGroup = item[this.rowGroupKey];\n                let value = column.getValue(item);\n                if (value === undefined || value === null || (isNaN(value) && column.numeric)) {\n                    return;\n                }\n                let colorValue = column.getColorValue(item, j);\n                let label;\n                if (column.label) {\n                    label = item[column.label];\n                }\n                if (GEOMS[column.geom] === undefined) {\n                    throw `Geom ${column.geom} not implemented. Use one of ${Object.keys(GEOMS).join(', ')}.`;\n                }\n                let el = GEOMS[column.geom](value, colorValue, column, O, P);\n                if (label) {\n                    const labelColor = d3.hsl(column.palette(colorValue)).l > 0.5\n                        ? 'black'\n                        : 'white';\n                    const g = d3.create('svg:g')\n                        .classed('fh-geom', true);\n                    g.append(() => el.classed('fh-geom', false).classed('fh-orig-geom', true).node());\n                    // By default place label in the center of the geom\n                    let labelX = P.rowHeight / 2;\n                    if (column.geom === 'bar') {\n                        // Bars are of different widths, place label on the left\n                        labelX = P.padding + P.geomPaddingX * 3;\n                    }\n                    g.append('text')\n                        .attr('x', labelX)\n                        .attr('y', P.rowHeight / 2)\n                        .attr('text-anchor', 'middle')\n                        .attr('dominant-baseline', 'central')\n                        .attr('fill', labelColor)\n                        .text(label);\n                    el = g;\n                }\n                el.attr('transform', `translate(${offset}, ${(j + nGroups) * P.rowHeight})`);\n                if (column.numeric && !label) {\n                    let tooltip = (+value).toFixed(4);\n                    tooltip = tooltip.replace(/\\.?0+$/, '');\n                    el.datum({tooltip: tooltip});\n                }\n                if (column.geom === 'pie') {\n                    const s = 'margin: 5px; border-top: 1px solid #aaa; border-left: 1px solid #aaa; font-size: 80%';\n                    const s2 = 'padding: 2px 4px; border-bottom: 1px solid #aaa; border-right: 1px solid #aaa';\n                    let tooltip = `<table style=\"${s}\">${column.palette.colorNames.map((colorName, i) => {\n                        return `<tr><td style=\"${s2}\">${colorName}:</td><td style=\"${s2}\">${value[i]}</td></tr>`;\n                    }).join('')}</table>`;\n                    el.datum({tooltip: tooltip});\n                }\n                this.body.append(() => el.node());\n                let elWidth;\n                if (label) {\n                    elWidth = el.select('.fh-orig-geom').node().getBBox().width;\n                } else {\n                    elWidth = el.node().getBBox().width;\n                }\n                if (column.geom === 'image') {\n                    elWidth = column.width;\n                }\n                if (elWidth > width) {\n                    width = elWidth;\n                }\n                if (width > maxWidth) {\n                    maxWidth = width;\n                }\n                if (label) {\n                    label = el.select('text');\n                    let fontSize = 100;\n                    for (let q = 0; q < 12; q++) {\n                        const { width } = label.node().getBBox();\n                        if (width > P.geomSize - P.geomPaddingX * 2) {\n                            fontSize -= 5;\n                            label.attr('font-size', `${fontSize}%`);\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            });\n            if (column.geom === 'bar' && column.options.drawGuide !== false) {\n                maxWidth = P.geomSize * column.width + P.geomPadding;\n                this.body.append('line')\n                    .attr('x1', offset + maxWidth)\n                    .attr('x2', offset + maxWidth)\n                    .attr('y1', this.renderGroups ? P.rowHeight : 0)\n                    .attr('y2', P.bodyHeight)\n                    .attr('stroke', O.theme.strokeColor)\n                    .attr('stroke-dasharray', '5 5')\n                    .attr('opacity', 0.5);\n            }\n            column.widthPx = Math.max(maxWidth, P.rowHeight);\n            column.widthPx = Math.round(column.widthPx);\n            column.offset = offset;\n            offset += column.widthPx + padding;\n            prevColGroup = column.group;\n        });\n        P.bodyWidth = offset + P.colSpacePx;\n    }\n\n    renderHeader() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        let headerHeight = 0;\n        let bodyWidth = 0;\n        let nonZeroRotate = false;\n        const groups = this.header.append('g');\n        const labels = this.header.append('g')\n            .attr('transform', `translate(0, ${P.rowHeight + P.colAnnotOffset})`);\n\n        const columnGroups = d3.group(this.columnInfo, column => column.group);\n        let abcCounter = 0;\n        columnGroups.forEach((group, groupName) => {\n            if (!groupName) {\n                return;\n            }\n            const groupInfo = this.columnGroups.get(groupName);\n            const column = new Column({\n                id: '_group',\n                palette: groupInfo.palette\n            }, [1]);\n            assignPalettes([column], this.palettes);\n            const lastCol = group[group.length - 1];\n            const groupStart = group[0].offset;\n            const groupEnd = lastCol.offset + lastCol.widthPx + P.geomPadding;\n            const fill = column.palette == 'none' && 'transparent' || column.palette(0.5);\n            const rect = groups.append('rect')\n                .attr('x', groupStart)\n                .attr('y', 0)\n                .attr('width', groupEnd - groupStart)\n                .attr('height', P.rowHeight)\n                .attr('fill', fill)\n                .attr('opacity', 0.25);\n            const text = groups.append('text')\n                .attr('x', groupStart + (groupEnd - groupStart) / 2)\n                .attr('y', P.rowHeight / 2)\n                .attr('text-anchor', 'middle')\n                .attr('dominant-baseline', 'central')\n                .attr('fill', O.theme.headerColor)\n                .text(groupInfo.level1);\n            if (O.fontSize) {\n                text.attr('font-size', O.fontSize);\n            }\n            const { width } = text.node().getBBox();\n            if (width + 2 * P.padding > groupEnd - groupStart) {\n                const diff = width + 2 * P.padding - (groupEnd - groupStart);\n                rect.attr('width', width + 2 * P.padding);\n                rect.attr('x', groupStart - diff / 2);\n            }\n            if (O.labelGroupsAbc) {\n                const letter = String.fromCharCode(\"a\".charCodeAt(0) + abcCounter);\n                const text = groups.append('text')\n                    .attr('x', groupStart + P.padding)\n                    .attr('y', P.rowHeight / 2)\n                    .attr('dominant-baseline', 'central')\n                    .attr('fill', O.theme.headerColor)\n                    .text(`${letter})`);\n                if (O.fontSize) {\n                    text.attr('font-size', O.fontSize);\n                }\n            }\n            abcCounter += 1;\n        });\n\n        this.columnInfo.forEach((column, i) => {\n            const el = labels.append('g')\n                .attr('transform', `rotate(${-P.colAnnotAngle})`)\n                .classed(`column-${i}`, true);\n            el.append('text')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('font-size', O.fontSize)\n                .style('fill', O.theme.textColor)\n                .style('cursor', 'pointer')\n                .datum(column)\n                .on('click', this.onColumnClick.bind(this))\n                .on('mouseenter', () => {\n                    el.style('text-decoration', 'underline dashed')\n                        .style('fill', O.theme.hoverColor)\n                })\n                .on('mouseleave', () => {\n                    el.style('text-decoration', '').style('fill', O.theme.textColor)\n                })\n                .text(column.name);\n            const nativeWidth = el.node().getBBox().width;\n            if (!nonZeroRotate && nativeWidth < column.widthPx - 2 * P.padding) {\n                column.rotate = false;\n            } else {\n                column.rotate = true;\n                nonZeroRotate = true;\n            }\n            const { width, height } = el.node().getBoundingClientRect();\n            if (height > headerHeight) {\n                headerHeight = height;\n            }\n            if (column.offset + column.widthPx / 2 + width > bodyWidth) {\n                bodyWidth = column.offset + column.widthPx / 2 + width + P.padding;\n            }\n        });\n        this.columnInfo.forEach((column, i) => {\n            let center = column.offset + column.widthPx / 2;\n            let rotate = column.rotate ? -P.colAnnotAngle : 0;\n            this.header.select(`.column-${i}`)\n                .attr(\n                    'transform',\n                    `translate(${center}, ${headerHeight - 2 * P.padding}) rotate(${rotate})`\n                );\n            if (!column.rotate) {\n                labels.select(`.column-${i} text`)\n                    .attr('text-anchor', 'middle');\n            } else {\n                labels.append('line')\n                    .attr('x1', center)\n                    .attr('x2', center)\n                    .attr('y1', headerHeight - 2)\n                    .attr('y2', headerHeight - 2 - P.padding)\n                    .attr('stroke', O.theme.strokeColor);\n            }\n        });\n        P.width = bodyWidth;\n        P.headerHeight = headerHeight + P.rowHeight + P.colAnnotOffset;\n    }\n\n    renderLegends() {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        // go through this.legends and render them sequentially\n\n        let footerHeight = 0;\n        const legendEl = this.footer.append('g');\n        let legendXOffset = 0;\n        let offset = 0;\n        let funkyrectPresent = false;\n\n        this.legends.forEach(legend => {\n            if (!legend.enabled) {\n                return;\n            }\n            const rowHeight = O.legendFontSize;\n            let offsetY = rowHeight * 2 + P.padding;\n            const el = legendEl.append('g');\n            el.attr('transform', `translate(${offset}, 0)`);\n            el.append('text')\n                .attr('x', 0)\n                .attr('y', offsetY)\n                .attr('font-size', O.legendFontSize)\n                .style('fill', O.theme.textColor)\n                .text(legend.title);\n\n            if (legend.geom === 'text') {\n                let labelsWidth = 0;\n                legend.labels.forEach((label, i) => {\n                    const txt = el.append('text')\n                        .attr('x', P.padding)\n                        .attr('y', offsetY + (i + 1) * (rowHeight + P.padding))\n                        .attr('font-size', O.legendFontSize)\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    const { width } = txt.node().getBBox();\n                    if (width > labelsWidth) {\n                        labelsWidth = width;\n                    }\n                });\n                legend.values.forEach((value, i) => {\n                    el.append('text')\n                        .attr('x', P.padding * 2 + labelsWidth)\n                        .attr('y', offsetY + (i + 1) * (rowHeight + P.padding))\n                        .attr('font-size', O.legendFontSize)\n                        .style('fill', O.theme.textColor)\n                        .text(value);\n                });\n            }\n            if (legend.geom === 'rect') {\n                let myOffset = 0;\n                legend.values.forEach((colorValue, i) => {\n                    const label = legend.labels[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.rect(size, colorValue, legend, O, P);\n                    geom.attr('transform', `translate(${myOffset}, ${offsetY + P.padding})`);\n                    el.append(() => geom.node());\n                    el.append('text')\n                        .attr('x', myOffset + P.rowHeight / 2)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'middle')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += P.geomSize + P.padding;\n                });\n            }\n            if (legend.geom === 'funkyrect') {\n                let myOffset = 0;\n                legend.labels.forEach((label, i) => {\n                    const colorValue = legend.values[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.funkyrect(size, colorValue, legend, O, P);\n                    el.append(() => geom.node());\n                    const { width: geomWidth, height: geomHeight } = geom.node().getBBox();\n                    geom.attr(\n                        'transform',\n                        `translate(${myOffset}, ${offsetY + P.rowHeight / 2 - geomHeight / 2})`\n                    );\n                    el.append('text')\n                        .attr('x', myOffset + P.rowHeight / 2)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'middle')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += geomWidth + P.padding;\n                });\n            }\n            if (legend.geom === 'circle') {\n                let myOffset = 0;\n                legend.labels.forEach((label, i) => {\n                    const colorValue = legend.values[i];\n                    const size = legend.size[i];\n                    const geom = GEOMS.circle(size, colorValue, legend, O, P);\n                    el.append(() => geom.node());\n                    const { width: geomWidth, height: geomHeight } = geom.node().getBBox();\n                    geom.attr(\n                        'transform',\n                        `translate(${myOffset}, ${offsetY + P.rowHeight / 2 - geomHeight / 2})`\n                    );\n                    el.append('text')\n                        .attr('x', myOffset + P.rowHeight / 2)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'middle')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    myOffset += geomWidth + P.padding;\n                });\n            }\n            if (legend.geom === 'bar') {\n                const colors = legend.palette.range();\n\n                const grad = this.svg.append('defs')\n                    .append('linearGradient')\n                    .attr('id', `grad_${legend.paletteName}`)\n                    .attr('x1', '0%')\n                    .attr('x2', '100%')\n                    .attr('y1', '0%')\n                    .attr('y2', '0%');\n\n                grad.selectAll('stop')\n                    .data(colors)\n                    .enter()\n                    .append('stop')\n                    .style('stop-color', function(d) { return d; })\n                    .attr('offset', function(d, i) {\n                        return 100 * (i / (colors.length - 1)) + '%';\n                    });\n\n                // A bit ugly to get the width of the column mapped to this legend\n                const col = this.columnInfo.filter((column) =>\n                    column.geom === 'bar' && column.paletteName === legend.paletteName\n                )[0];\n\n                el.append('rect')\n                    .attr('x', P.padding)\n                    .attr('y', offsetY + P.padding)\n                    .attr('width', col.widthPx)\n                    .attr('height', P.rowHeight)\n                    .style('fill', `url(#grad_${legend.paletteName})`)\n                    .attr('stroke', 'black')\n                    .attr('stroke-width', 0.5);\n\n                legend.labels.forEach((label, i) => {\n                    if (label === '') {\n                        return;\n                    }\n                    const value = legend.values[i];\n                    const xPos = P.padding + col.widthPx * value;\n                    if (value > 0 && value < 1) {\n                        el.append('line')\n                            .attr('x1', xPos)\n                            .attr('x2', xPos)\n                            .attr('y1', offsetY + P.rowHeight + P.padding)\n                            .attr('y2', offsetY + P.rowHeight)\n                            .attr('stroke', 'black')\n                            .attr('stroke-width', 0.5);\n                    }\n                    el.append('text')\n                        .attr('x', xPos)\n                        .attr('y', offsetY + P.rowHeight + rowHeight + P.padding)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'middle')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                });\n            }\n            if (legend.geom === 'image') {\n                legend.values.forEach((value, i) => {\n                    const label = legend.labels[i];\n                    const img = GEOMS.image(value, null, {width: legend.size[i]}, O, P);\n                    img.attr('transform', `translate(0, ${offsetY + P.padding})`);\n                    el.append(() => img.node());\n                    const { width: imgWidth, height: imgHeight } = img.node().getBBox();\n                    el.append('text')\n                        .attr('x', imgWidth + P.padding)\n                        .attr('y', offsetY + P.padding + imgHeight / 2)\n                        .attr('font-size', O.legendFontSize)\n                        .attr('text-anchor', 'left')\n                        .attr('dominant-baseline', 'central')\n                        .style('fill', O.theme.textColor)\n                        .text(label);\n                    offsetY += imgHeight + P.padding;\n                });\n            }\n            if (legend.geom === 'pie') {\n                const arcs = d3.pie().endAngle(Math.PI)(Array(legend.palette.colorNames.length).fill(1));\n                const g = el.append('g');\n                g.attr('transform', `translate(0, ${offsetY + P.padding + P.rowHeight})`);\n                g.selectAll('arcs')\n                    .data(arcs)\n                    .enter()\n                    .append('path')\n                        .attr('d', d3.arc().innerRadius(0).outerRadius(P.geomSize / 2))\n                        .attr('fill', (_, i) => {\n                            return legend.palette(i);\n                        })\n                        .style('stroke', O.theme.strokeColor)\n                        .style('stroke-width', 1)\n                        .attr('transform', `translate(${P.geomSize / 2 + P.geomPadding - 0.5}, 0)`);\n\n                g.selectAll('text')\n                    .data(arcs)\n                    .enter()\n                    .append('text')\n                    .text((_, i) => legend.palette.colorNames[i])\n                    .attr('font-size', O.legendFontSize)\n                    .attr('dominant-baseline', 'central')\n                    .style('fill', O.theme.textColor)\n                    .attr('transform', d => {\n                        const p = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize).centroid(d);\n                        p[0] += P.geomSize / 2 + 4 * P.geomPadding;\n                        return `translate(${p})`;\n                    });\n\n                g.selectAll('lines')\n                    .data(arcs)\n                    .enter()\n                    .append('path')\n                        .attr('d', d => {\n                            const p1 = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize / 2 + 5).centroid(d);\n                            const p2 = d3.arc().innerRadius(P.geomSize / 2).outerRadius(P.geomSize - 5).centroid(d);\n                            p1[0] += P.geomSize / 2 + P.geomPadding;\n                            p2[0] += P.geomSize / 2 + 3 * P.geomPadding;\n                            return d3.line()([p1, p2]);\n                        })\n                        .style('stroke', O.theme.strokeColor)\n                        .style('stroke-width', 0.5);\n            }\n\n            const { width } = el.node().getBBox();\n            offset += width + P.padding * 2;\n        });\n\n        const { height } = legendEl.node().getBBox();\n        if (height > footerHeight) {\n            footerHeight = height;\n        }\n        let legendWidth = offset - P.padding;\n        if (funkyrectPresent) {\n            legendWidth += P.geomSize;\n        }\n        if (legendXOffset + legendWidth > P.width) {\n            if (legendWidth <= P.width) { // try to right-justify the legend\n                legendXOffset = P.width - legendWidth;\n            } else {\n                legendXOffset = 0;\n                P.width = offset;\n            }\n        }\n        P.footerOffset = legendXOffset;\n        P.footerHeight = footerHeight + P.rowHeight;\n    }\n\n    hideTooltip() {\n        if (this.tooltip) {\n            this.tooltip.style(\"display\", \"none\");\n        }\n    }\n\n    showTooltip(mouse, text) {\n        if (this.tooltip === undefined) {\n            this.tooltip = d3.select(\"body\")\n                .append(\"div\")\n                    .style(\"z-index\", 2000)\n                    .style(\"position\", \"absolute\")\n                    .style(\"background-color\", \"#333\")\n                    .style(\"color\", \"white\")\n                    .style(\"border\", \"solid\")\n                    .style(\"border-width\", \"1px\")\n                    .style(\"border-radius\", \"5px\")\n                    .style(\"padding\", \"3px 5px\")\n                    .style(\"display\", \"none\");\n        }\n\n        const offset = 10;\n        this.tooltip\n            .html(text)\n            .style(\"top\", mouse[1] + 2 * offset + \"px\")\n            .style(\"left\", mouse[0] + offset + \"px\")\n            .style(\"display\", \"block\");\n    }\n\n    onMouseMove(e) {\n        if (e.target) {\n            let el = d3.select(e.target);\n            while (el.classed('fh-geom') === false && el.node() != this.svg.node()) {\n                el = d3.select(el.node().parentNode);\n            }\n            const d = el.datum();\n            if (d && d.tooltip) {\n                const mouse = d3.pointer(e, document.body);\n                this.showTooltip(mouse, d.tooltip);\n                return;\n            }\n        }\n        this.hideTooltip();\n    }\n\n    onColumnClick(e) {\n        const el = d3.select(e.target);\n        const elBox = el.node().getBBox();\n        const column = el.datum();\n        const comparator = column.sort();\n        let data = d3.group(this.data, d => d[this.rowGroupKey]);\n        data = [].concat(...this.rowGroupOrder.map(group => d3.sort(data.get(group), (a, b) => {\n            [a, b] = [a[column.id], b[column.id]];\n            if (column.numeric) {\n                [a, b] = [+a, +b];\n            }\n            return comparator(a, b);\n        })));\n        this.data = data;\n        this.svg.selectChildren().remove();\n        this.render();\n\n        this.indicateSort(column, elBox);\n    }\n\n    indicateSort(column, labelBox) {\n        const O = this.options;\n        const P = this.positionArgs;\n\n        this.sortIndicator = this.header.append(\"text\")\n            .attr('font-size', 12)\n            .attr('fill', O.theme.hoverColor);\n        if (column.sortState === \"asc\") {\n            this.sortIndicator.text('↑');\n        } else {\n            this.sortIndicator.text('↓');\n        }\n        this.sortIndicator\n            .attr('text-anchor', 'right')\n            .attr('dominant-baseline', 'text-bottom');\n        let x = column.offset + column.widthPx / 2 - 2 * P.padding;\n        let y = P.headerHeight - P.padding;\n        if (!column.rotate) {\n            x -= labelBox.width / 2;\n            y -= labelBox.height / 2;\n            this.sortIndicator.attr('dominant-baseline', 'central');\n        }\n        this.sortIndicator\n            .attr('x', x)\n            .attr('y', y);\n    }\n\n    render() {\n        this.header = this.svg.append(\"g\");\n        this.body = this.svg.append(\"g\");\n        this.footer = this.svg.append(\"g\");\n\n        this.renderStripedRows();\n        this.renderData();\n        this.renderHeader();\n        this.renderLegends();\n\n        const O = this.options;\n        const P = this.positionArgs;\n\n        this.svg.attr('width', P.width);\n        this.svg.attr('height', P.bodyHeight + P.headerHeight + P.footerHeight);\n        if (this.renderGroups) {\n            this.header.attr('transform', `translate(0, ${P.rowHeight})`);\n        }\n        this.body.selectAll('.row').attr('width', P.bodyWidth);\n        this.body.attr(\"transform\", `translate(0, ${P.headerHeight})`);\n        this.footer.attr('transform', `translate(${P.footerOffset}, ${P.headerHeight + P.bodyHeight})`);\n        this.svg.attr('style', '');\n        if (O.rootStyle) {\n            this.svg.attr('style', O.rootStyle);\n        }\n    }\n\n    listen() {\n        this.svg.on(\"mousemove\", this.onMouseMove.bind(this));\n    }\n};\n\n\n/**\n * The main entry point for the library. Takes data and various configuration options and returns\n * an SVG element with the heatmap.\n *\n * @param {ColumnData|RowData} data - data to plot, usually d3-fetch output\n * @param {ColumnData|module:columns~ColumnInfo[]} columnInfo - information about how the columns\n *   should be displayed. If not specified, all columns from `data` will be displayed.\n *   See {@link module:columns~ColumnInfo}, {@link module:columns.Column}\n * @param {ColumnData|RowData} rowInfo - information about how the rows should be displayed\n * @param {ColumnData|RowData} columnGroups - information about how to group columns\n * @param {ColumnData|RowData} rowGroups - information about how to group rows\n * @param {Object} palettes - mapping of names to palette colors, see\n *   {@link module:palettes.assignPalettes}\n * @param {ColumnData|RowData} legends - a list of legends to add to the plot\n * @param {Object} positionArgs - positioning arguments, see {@link PositionArgs}\n * @param {HeatmapOptions} options - options for the heatmap, see {@link HeatmapOptions}\n * @param {boolean} scaleColumn - whether to apply min-max scaling to numerical\n *   columns. Defaults to true\n *\n * @returns {SVGElement} - the SVG element containing the heatmap\n *\n */\nfunction funkyheatmap(\n    data,\n    columnInfo,\n    rowInfo = [],\n    columnGroups = [],\n    rowGroups = [],\n    palettes = {},\n    legends = [],\n    positionArgs = {},\n    options = {},\n    scaleColumn = true\n) {\n    [data, columnInfo, columnGroups, rowInfo, rowGroups, legends] = ensureRowData(\n        data, columnInfo, columnGroups, rowInfo, rowGroups, legends\n    );\n    columnInfo = buildColumnInfo(data, columnInfo, scaleColumn, options.colorByRank);\n    columnGroups = buildColumnGroups(columnGroups, columnInfo);\n    legends = prepareLegends(legends, palettes, columnInfo);\n    assignPalettes(columnInfo, palettes);\n    assignPalettes(legends, palettes);\n\n    const svg = d3.select('body')\n        .append('svg')\n            .classed('funkyheatmap', true)\n            .style('visibility', 'hidden')\n            .style('position', 'absolute')\n            .style('left', '-2000px');\n    const heatmap = new FunkyHeatmap(\n        data,\n        columnInfo,\n        columnGroups,\n        rowInfo,\n        rowGroups,\n        palettes,\n        legends,\n        positionArgs,\n        options,\n        svg\n    );\n    heatmap.render();\n    heatmap.listen();\n    heatmap.svg.remove();\n\n    return heatmap.svg.node();\n}\n\nexport default funkyheatmap;\n","module.exports=_;","/** @module */\n\n/**\n * Converts object-based dataframe to array-based dataframe.\n *\n * @param {ColumnData} data - an object with each property representing dataframe column as an array.\n *   Columns are of the same length\n * @returns {RowData} - array of objects with properties corresponding to columns\n */\nexport function colToRowData(data) {\n    const columns = Object.getOwnPropertyNames(data);\n    const size = data[columns[0]].length;\n    const result = [];\n    for (let i = 0; i < size; i++) {\n        let item = {};\n        for (let column of columns) {\n            item[column] = data[column][i];\n        }\n        result.push(item);\n    }\n    return result;\n};\n\n/**\n * Converts array-based dataframe to object-based dataframe.\n *\n * @param {RowData} data - an array of objects with properties\n * @returns {ColumnData} - object with each property representing dataframe column as an array,\n *   values are preserved in the same order as in the input array\n */\nexport function rowToColData(data) {\n    const result = {};\n    const columns = Object.getOwnPropertyNames(data[0]);\n    for (let column of columns) {\n        result[column] = data.map(item => item[column]);\n    }\n    return result;\n};\n\n/**\n * Convenience function to convert potential column-based dataframes to row-based dataframes.\n *\n * @param  {Object[]} objects - potential objects to convert to row-based dataframes. Only converts\n *   objects, skips arrays\n * @returns {Object[]} - array of converted objects\n */\nexport function ensureRowData(...objects) {\n    return objects.map(obj => {\n        if (obj && !Array.isArray(obj)) {\n            obj = colToRowData(obj);\n        }\n        return obj;\n    });\n};\n","/** @module  */\n\nimport * as d3 from 'd3';\nimport _ from 'lodash';\n\nimport { rowToColData } from './input_util';\n\n/**\n * @typedef {Object} ColumnInfo\n * @description Information about a dataframe column and how to display it.\n * @property {string} id - column id in the dataset. Required\n * @property {string} id_color - id of the column that will determine the color for display\n * @property {string} id_size - id of the column that will determine the size for display\n * @property {boolean} colorByRank - whether to color by rank per column instead of by value\n * @property {string} label - id of the column that has the values to display as labels over\n *   the geoms\n * @property {string} id_label - synonym for `label`\n * @property {string} geom - type of the geom to display. Default is `funkyrect` for numerical data,\n *   and `text` for categorical data\n * @property {string} name - name of the column to display above the column\n * @property {string} group - name of the group the column belongs to\n * @property {string} palette - name of the palette to use for coloring the column\n * @property {number} width - width of the column, only used for `bar` and `image` geoms\n * @property {Object} options - additional options for the column\n * @property {string} options.palette - synonym for `palette`\n * @property {number} options.width - synonym for `width`\n * @property {boolean} options.drawGuide - whether to draw a guide at maximum for the bar geom\n *   column\n * @property {boolean} options.draw_outline - synonym for `options.drawGuide`\n */\n\n/**\n * @class\n * @property {string} id - column id in the dataset\n * @property {boolean} numeric - whether the column is numeric, computed from the data.\n *   See {@link module:columns~isNumeric} for details.\n * @property {boolean} categorical - whether the column is categorical, computed from the data\n * @property {string} id_color - id of the column that will determine the color for display\n * @property {string} id_size - id of the column that will determine the size for display\n * @property {boolean} colorByRank - whether to color by rank per column instead of by value\n * @property {boolean} scaleColumn - whether to scale the column data to `[0, 1]`\n * @property {string} label - id of the column that has the values to display as labels over the\n *   geoms\n * @property {string} geom - type of the geom to display\n */\nexport class Column {\n    /**\n     * Initialize a column with checks, defaults, and stats calculation.\n     *\n     * @param {module:columns~ColumnInfo} info - column configuration\n     * @param {Array} data - array of data for the column\n     * @param {string[]} columnNames - names of the columns in the dataset, to do cross-checks\n     */\n    constructor(info, data, columnNames) {\n        ({\n            id: this.id,\n            id_color: this.id_color,\n            id_size: this.id_size,\n            colorByRank: this.colorByRank,\n            scaleColumn: this.scaleColumn,\n            name: this.name,\n            geom: this.geom,\n            group: this.group,\n            palette: this.palette,\n            width: this.width,\n            label: this.label,\n            options: this.options\n        } = info);\n        this.data = data;\n\n        // defaults\n        this.colorByRank = this.colorByRank || false;\n        this.label = this.label || info.id_label;\n\n        const value = data[0];\n        // geoms text and pie are always categorical\n        if (isNumeric(value) && this.geom !== 'text' && this.geom !== 'pie') {\n            this.numeric = true;\n            this.categorical = false;\n            this.data = this.data.map(d => +d);\n        } else {\n            this.numeric = false;\n            this.categorical = true;\n            // disable numerical options for categorical data\n            this.colorByRank = false;\n            this.scaleColumn = false;\n        }\n\n        if (this.name === undefined) {\n            this.name = this.id;\n        }\n\n        if (this.options === undefined) {\n            this.options = {};\n        }\n\n        if (this.options.width !== undefined && this.width === undefined) {\n            this.width = this.options.width;\n        }\n        if (this.options.palette !== undefined && this.palette === undefined) {\n            this.palette = this.options.palette;\n        }\n\n        if (this.geom === undefined) {\n            if (this.numeric) {\n                this.geom = 'funkyrect';\n            } else {\n                this.geom = 'text';\n            }\n        }\n\n        if (this.palette === undefined) {\n            if (this.geom === 'pie') {\n                this.palette = 'categorical';\n            }\n            if (this.numeric) {\n                this.palette = 'numerical';\n            }\n        }\n\n        if (this.width === undefined) {\n            if (this.geom === 'bar') {\n                this.width = 4;\n            }\n        }\n\n        if (this.geom === 'image' && this.width === undefined) {\n            throw `Please, specify width for column with geom=image`;\n        }\n        if (this.geom === 'bar' && this.options.draw_outline !== undefined) {\n            this.options.drawGuide = this.options.draw_outline;\n        }\n\n        if (this.label !== undefined && !columnNames.includes(this.label)) {\n            throw `Column ${this.id} has label=${this.label}, which is not in the data`;\n        }\n        if (this.id_color !== undefined && !columnNames.includes(this.id_color)) {\n            throw `Column ${this.id} has id_color=${this.id_color}, which is not in the data`;\n        }\n        if (this.id_size !== undefined && !columnNames.includes(this.id_size)) {\n            throw `Column ${this.id} has id_size=${this.id_size}, which is not in the data`;\n        }\n\n        this.sortState = null;\n        if (this.numeric) {\n            this.maybeCalculateStats();\n        }\n    }\n\n    maybeCalculateStats() {\n        let extent = [0, 1];\n        if (this.scaleColumn) {\n            extent = d3.extent(this.data);\n        }\n        [this.min, this.max] = extent;\n        this.range = this.max - this.min;\n        this.scale = d3.scaleLinear().domain(extent);\n        if (this.colorByRank) {\n            this.rankedData = d3.rank(this.data);\n            // In case there are ties, d3 will return ranks like [0, 0, 2] skipping rank 1.\n            // So we renormalize the ranks from [0, 2] to [0, 1], and map the colors to the number\n            // of unique ranks only. Otherwise we allocate 3 colors for [0, 0, 2] data, and the\n            // display colors won't fully map the palette.\n            const uniqueRanks = _.uniq(this.rankedData);\n            const rankedRanks = d3.rank(uniqueRanks);\n            this.normalizedRanks = _.zipObject(uniqueRanks, rankedRanks);\n            this.colorScale = d3.scaleLinear().domain([0, uniqueRanks.length - 1]);\n        }\n    }\n\n    /**\n     * Get value for the item, which is size for numeric or display for text/pie.\n     *\n     * @param {Object} item - data item with our column\n     * @returns {number|string|number[]} - value for sizing or displaying the item\n     */\n    getValue(item) {\n        if (this.id_size !== undefined) {\n            return item[this.id_size];\n        }\n        if (this.numeric) {\n            return +item[this.id];\n        }\n        return item[this.id];\n    }\n\n    /**\n     * Get value for coloring the item.\n     *\n     * @param {Object} item - data item with our column\n     * @param {number} itemPos - data item position in the dataframe. Needed for getting the rank\n     *   with ties.\n     * @returns {number|string} - value for coloring the item\n     */\n    getColorValue(item, itemPos) {\n        if (this.id_color !== undefined) {\n            return item[this.id_color];\n        }\n        if (this.colorByRank) {\n            const rank = this.rankedData[itemPos];\n            const normalizedRank = this.normalizedRanks[rank];\n            return normalizedRank;\n        }\n        return item[this.id];\n    }\n\n    sort() {\n        if (this.sortState === \"desc\") {\n            this.sortState = \"asc\";\n            return d3.ascending;\n        }\n        this.sortState = \"desc\";\n        return d3.descending;\n    }\n}\n\n/**\n * Assemble all column information needed for drawing\n *\n * @param {RowData} data - dataset\n * @param {module:columns~ColumnInfo[]} columnInfo - properties of the columns for drawing, which\n *   will by modified in place\n * @param {boolean} scaleColumn - whether to min-max scale data for column, default for all columns\n * @param {boolean} colorByRank - whether to color by rank instead of by value, default for all\n *   columns\n */\nexport function buildColumnInfo(data, columnInfo, scaleColumn, colorByRank) {\n    const colData = rowToColData(data);\n    const columnNames = Object.getOwnPropertyNames(colData);\n    if (columnInfo === undefined || columnInfo.length === 0) {\n        console.info(\"No column info specified, assuming all columns are to be displayed.\");\n        columnInfo = Object.getOwnPropertyNames(colData).map(id => {\n            return {id: id}\n        });\n    }\n    if (colorByRank) {\n        columnInfo.forEach(info => {\n            info.colorByRank === undefined && (info.colorByRank = true);\n        });\n    }\n    if (scaleColumn) {\n        columnInfo.forEach(info => {\n            info.scaleColumn === undefined && (info.scaleColumn = true);\n        });\n    }\n    return columnInfo.map(info => {\n        let column = info.id;\n        if (column === undefined) {\n            throw \"Column info must have id field corresponding to the column in the data\";\n        }\n        return new Column(info, colData[column], columnNames);\n    });\n};\n\n/**\n * Check and prepare column group information\n *\n * @param {Object[]} columnGroups - information about column groups, empty array if not specified\n * @param {Object[]} columnInfo - information about columns, to crosscheck\n * @returns {Object[]} - column groups with defaults filled in, if necessary\n */\nexport function buildColumnGroups(columnGroups, columnInfo) {\n    if (columnGroups.length === 0 && columnInfo.some(i => i.group)) {\n        console.info(\"No column groups specified, but some columns have group, building automatically\");\n        columnGroups = columnInfo\n            .filter(i => i.group)\n            .map(i => i.group);\n        columnGroups = [...new Set(columnGroups)];\n        columnGroups = columnGroups.map(group => {\n            return {group: group}\n        });\n    }\n    if (columnGroups.length === 0) {\n        return [];\n    }\n    columnInfo.forEach(i => {\n        if (i.group && !columnGroups.some(g => g.group === i.group)) {\n            throw `Column group ${i.group} is not specified in columnGroups`;\n        }\n    });\n    let allGroups = columnInfo.filter(i => i.group).map(i => i.group);\n    let unused = columnGroups.filter(i => !allGroups.includes(i.group));\n    if (unused.length > 0) {\n        console.warn(`Unused column groups: ${unused.map(i => i.group).join(', ')}`);\n    }\n\n    if (columnGroups[0].palette === undefined) {\n        console.info(\"Column groups did not specify `palette`. Assuming no colours\")\n        columnGroups.forEach(i => {\n            i.palette = 'none';\n        });\n    }\n    columnGroups.forEach(i => {\n        if (i.palette === undefined) {\n            throw `Column group ${i.group} did not specify palette`;\n        }\n    });\n\n    if (columnGroups[0].level1 === undefined) {\n        console.info(\"Column groups did not specify `level1`. Using group id as level1\")\n        columnGroups.forEach(i => {\n            i.level1 = i.group.charAt(0).toUpperCase() + i.group.slice(1);\n        });\n    }\n\n    return columnGroups;\n};\n\n/**\n * Test if a value is a number, including strings that can be coerced to a number.\n *\n * @param {*} str - value to test\n * @returns {boolean} - if the value is a number\n */\nfunction isNumeric(str) {\n    if (typeof str === 'number') return true;\n    if (typeof str !== 'string') return false;\n    // use type coercion to parse the _entirety_ of the string\n    // (`parseFloat` alone does not do this)...\n    return !Number.isNaN(str)\n        && !Number.isNaN(parseFloat(str)); // ...and ensure strings of whitespace fail\n}\n","/** @module */\n\nimport * as d3 from 'd3';\n\n/**\n * Default palettes for numerical and categorical data. See source for the colors.\n * @constant {Object}\n * @property {Object} numerical - palettes for numerical data. Default is Blues\n * @property {Object} categorical - palettes for categorical data. Default is Set1\n */\nconst defaultPalettes = {\n    numerical: {\n        Blues: [\n            \"#011636\", \"#08306B\", \"#08519C\", \"#2171B5\", \"#4292C6\", \"#6BAED6\", \"#9ECAE1\", \"#C6DBEF\",\n            \"#DEEBF7\", \"#F7FBFF\"\n        ],\n        Greens: [\n            \"#00250f\", \"#00441B\", \"#006D2C\", \"#238B45\", \"#41AB5D\", \"#74C476\", \"#A1D99B\", \"#C7E9C0\",\n            \"#E5F5E0\"\n        ],\n        Greys: [\n            \"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#BDBDBD\", \"#D9D9D9\", \"#F0F0F0\"\n        ],\n        Reds: [\n            \"#CB181D\", \"#EF3B2C\", \"#FB6A4A\", \"#FC9272\", \"#FCBBA1\", \"#FEE0D2\", \"#FFF5F0\"\n        ],\n        YlOrBr: [\n            \"#EC7014\", \"#FE9929\", \"#FEC44F\", \"#FEE391\", \"#FFF7BC\", \"#FFFFE5\"\n        ]\n    },\n    categorical: {\n        Set1: [\n            \"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#984EA3\",\"#FF7F00\",\"#FFFF33\",\"#A65628\",\"#F781BF\",\n            \"#999999\"\n        ],\n        Set2: [\n            \"#66C2A5\",\"#FC8D62\",\"#8DA0CB\",\"#E78AC3\",\"#A6D854\",\"#FFD92F\",\"#E5C494\",\"#B3B3B3\"\n        ],\n        Set3: [\n            \"#8DD3C7\", \"#FFFFB3\", \"#BEBADA\", \"#FB8072\", \"#80B1D3\", \"#FDB462\", \"#B3DE69\", \"#FCCDE5\",\n            \"#D9D9D9\", \"#BC80BD\", \"#CCEBC5\", \"#FFED6F\"\n        ],\n        Dark2: [\n            \"#1B9E77\",\"#D95F02\",\"#7570B3\",\"#E7298A\",\"#66A61E\",\"#E6AB02\",\"#A6761D\",\"#666666\"\n        ]\n    }\n};\n\n/**\n *\n * @param {module:columns.Column[]} columnInfo - list of Column objects with information\n * @param {Object} palettes - mapping of names to palette colors\n *   possible options for the palette colors are:\n *   - name of a built-in palette (e.g. Blues, Set1…)\n *   - `Array` of colors as strings\n *   - `Object` with keys `colors` and `names` - important for categorical data\n */\nexport function assignPalettes(columnInfo, palettes) {\n    palettes = { numerical: \"Blues\", categorical: \"Set1\", ...palettes };\n    columnInfo.forEach(column => {\n        if (column.palette && column.palette != 'none') {\n            column.paletteName = column.palette;\n            let name = palettes[column.palette];\n            if (name === undefined) { // fallback\n                name = column.palette;\n            }\n            let colors;\n            let colorNames;\n            if (defaultPalettes.numerical[name]) {\n                colors = defaultPalettes.numerical[name];\n            } else if (defaultPalettes.categorical[name]) {\n                colors = defaultPalettes.categorical[name];\n            } else if (Array.isArray(name)) {\n                const item = name[0];\n                if (typeof item === 'string' || item instanceof String) {\n                    colors = name;\n                } else {\n                    throw `Palette definition ${name} is not recognized. Expected are: array of colors, array of color-name pairs.`;\n                }\n            } else if (Array.isArray(name.colors) && Array.isArray(name.names)) {\n                colors = name.colors;\n                colorNames = name.names;\n            } else {\n                const names = [\n                    ...Object.getOwnPropertyNames(defaultPalettes.numerical),\n                    ...Object.getOwnPropertyNames(defaultPalettes.categorical)\n                ];\n                throw `Palette ${name} not defined. Use one of ${names.join(', ')}.`;\n            }\n\n            if (column.numeric) {\n                let scale = column.scale;\n                if (column.colorScale) {\n                    scale = column.colorScale;\n                }\n                const [min, max] = scale.domain();\n                const step = (max - min) / (colors.length - 1);\n                const domain = [...d3.range(min, max, step), max];\n                column.palette = d3.scaleLinear().domain(domain).range(colors);\n            }\n            // TODO: replace with categorical\n            if (column.geom === 'pie' || column.geom === 'text') {\n                let domain = colorNames;\n                if (domain === undefined) {\n                    domain = d3.range(colors.length);\n                }\n                column.palette = d3.scaleOrdinal().domain(domain).range(colors);\n                column.palette.colors = colors;\n                column.palette.colorNames = colorNames;\n            }\n        }\n    });\n};\n","/** @module */\n\nimport * as _ from 'lodash';\n\n/**\n *\n * @param {Object[]|undefined} legends - user provided legend configuration\n * @param {Object} palettes - mapping of names to palette colors\n * @param {Object[]} columnInfo - user provided information on columns\n */\nexport function prepareLegends(legends, palettes, columnInfo) {\n    if (legends === undefined) {\n        console.info('No legends provided, will infer automatically');\n        legends = [];\n    }\n\n    const colInfoPalettes = [];\n    columnInfo.forEach(i => {\n        if (i.palette && colInfoPalettes.indexOf(i.palette) === -1) {\n            colInfoPalettes.push(i.palette);\n        }\n    });\n    const legendPalettes = [];\n    legends.forEach(l => {\n        if (l.palette && legendPalettes.indexOf(l.palette) === -1) {\n            legendPalettes.push(l.palette);\n        }\n    });\n\n    const missingPalettes = _.difference(colInfoPalettes, legendPalettes);\n    if (missingPalettes.length > 0) {\n        let msg = 'These palettes are missing in legends, adding legends for them: ';\n        msg += missingPalettes.join(', ');\n        console.info(msg);\n        missingPalettes.forEach(p => {\n            legends.push({\n                title: p,\n                palette: p,\n                enabled: true,\n            });\n        });\n    }\n\n    legends.forEach(legend => {\n        if (legend.enabled === undefined) {\n            legend.enabled = true;\n        }\n        if (legend.title === undefined) {\n            legend.title = legend.palette;\n        }\n        if (legend.geom === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify geom, copying from column info`);\n            const col = columnInfo.find(i => i.palette === legend.palette);\n            legend.geom = col.geom;\n        }\n        if (legend.labels === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify labels, inferring from column info`);\n            if (legend.geom === 'pie') {\n                const pal = palettes[legend.palette];\n                if (pal.names === undefined) {\n                    console.warn(`Cannot infer labels for legend \\`${legend.title}\\`, please provide color names in palette. Disabling this legend`);\n                    legend.enabled = false;\n                }\n                legend.labels = palettes[legend.palette].names;\n            } else if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n                // TODO: get from default options\n                legend.labels = ['0', '', '0.2', '', '0.4', '', '0.6', '', '0.8', '', '1'];\n            } else if (legend.geom === 'text' || legend.geom === 'image') {\n                console.warn(`Cannot infer labels for legend \\`${legend.title}\\` of type ${legend.geom}, please provide labels. Disabling this legend`);\n                legend.enabled = false;\n            }\n        }\n        if (legend.size === undefined) {\n            console.info(`Legend \\`${legend.title}\\` did not specify size, inferring from column info`);\n            if (legend.geom === 'circle' || legend.geom === 'funkyrect') {\n                legend.size = [...d3.range(0, legend.labels.length - 1).map(\n                    (i) => i / (legend.labels.length - 1)\n                ), 1];\n            } else if (legend.geom === 'rect' || legend.geom === 'bar') {\n                legend.size = 1;\n            } else if (legend.geom === 'image') {\n                throw `Please specify size (width) for image legend \\`${legend.title}\\``;\n            }\n        }\n        if (legend.values === undefined) {\n            if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n                legend.values = [...d3.range(0, legend.labels.length - 1).map(\n                    (i) => i / (legend.labels.length - 1)\n                ), 1];\n            }\n            if (legend.enabled && (legend.geom === 'image' || legend.geom === 'text')) {\n                console.warn(`Cannot infer values for legend \\`${legend.title}\\` of type ${legend.geom}, please provide values. Disabling this legend`);\n                legend.enabled = false;\n            }\n        }\n        if (_.isNumber(legend.size)) {\n            legend.size = Array(legend.labels.length).fill(legend.size);\n        }\n        // TODO: make legend class descend from Column\n        if (['circle', 'rect', 'funkyrect', 'bar'].includes(legend.geom)) {\n            legend.numeric = true;\n            let extent = [0, 1];\n            [legend.min, legend.max] = extent;\n            legend.range = legend.max - legend.min;\n            legend.scale = d3.scaleLinear().domain(extent);\n        }\n    });\n    return legends;\n}\n","/** @module */\n\nimport * as d3 from 'd3';\n\n\nexport const GEOMS = {\n    text: (value, _, column, O, P) => {\n        let fill = O.theme.textColor;\n        if (column.palette) {\n            fill = column.palette(value);\n        }\n        let align = 'start', x = 0;\n        if (column.options.align === 'center' || column.options.align === 'middle') {\n            align = 'middle';\n            x = P.rowHeight / 2;\n        }\n        if (column.options.align === 'right' || column.options.align === 'end') {\n            align = 'end';\n            x = P.rowHeight - P.padding;\n        }\n        const el = d3.create('svg:text')\n            .attr('dominant-baseline', 'middle')\n            .attr('y', P.rowHeight / 2)\n            .attr('x', x)\n            .attr('text-anchor', align)\n            .style('fill', fill)\n            .text(value);\n        if (O.fontSize) {\n            el.attr('font-size', O.fontSize);\n        }\n        return el;\n    },\n\n    bar: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        let width = value * column.width * P.geomSize;\n        if (width === 0) {\n            width = P.minGeomSize;\n        }\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', width.toFixed(2))\n            .attr('height', P.geomSize)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill);\n    },\n\n    circle: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        let radius = value * P.geomSize / 2;\n        if (radius === 0) {\n            radius = P.minGeomSize;\n        }\n        return d3.create('svg:circle')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('cx', P.rowHeight / 2)\n            .attr('cy', P.rowHeight / 2)\n            .attr('r', radius.toFixed(2));\n    },\n\n    rect: (value, colorValue, column, O, P) => {\n        const fill = column.palette(colorValue);\n        value = column.scale(value);\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', P.geomSize)\n            .attr('height', P.geomSize);\n    },\n\n    funkyrect: (value, colorValue, column, O, P) => {\n        let scaled = column.scale(value);\n        const fill = column.palette(colorValue);\n        if (scaled < P.funkyMidpoint) {\n            // transform value to a 0.0 .. 0.5 range\n            value = column.scale.copy()\n                .range([0, 0.5])\n                .domain([column.min, column.min + column.range * P.funkyMidpoint])(value);\n            let radius = (value * 0.9 + 0.1) * P.geomSize - P.geomPadding; // 0.5 for stroke\n            if (radius <= 0) {\n                radius = P.minGeomSize;\n            }\n            return d3.create('svg:circle')\n                .classed('fh-geom', true)\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .style('fill', fill)\n                .attr('cx', P.rowHeight / 2)\n                .attr('cy', P.rowHeight / 2)\n                .attr('r', radius.toFixed(2));\n        }\n        // transform value to a 0.5 .. 1.0 range\n        value = column.scale\n            .copy()\n            .range([0.5, 1])\n            .domain([column.min + column.range * P.funkyMidpoint, column.max])(value);\n        const cornerSize = (0.9 - 0.8 * value) * P.geomSize;\n        return d3.create('svg:rect')\n            .classed('fh-geom', true)\n            .style('stroke', O.theme.strokeColor)\n            .style('stroke-width', 1)\n            .style('fill', fill)\n            .attr('x', P.geomPaddingX)\n            .attr('y', P.geomPadding)\n            .attr('width', P.geomSize)\n            .attr('height', P.geomSize)\n            .attr('rx', cornerSize.toFixed(2))\n            .attr('ry', cornerSize.toFixed(2));\n    },\n\n    pie: (value, _, column, O, P) => {\n        let nonZero = 0;\n        let nonZeroIdx = 0;\n        value.forEach((x, i) => {\n            if (x > 0) {\n                nonZero += 1;\n                nonZeroIdx = i;\n            }\n        });\n        if (nonZero === 1) {\n            const fill = column.palette(nonZeroIdx);\n            return d3.create('svg:circle')\n                .classed('fh-geom', true)\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .style('fill', fill)\n                .attr('cx', P.rowHeight / 2)\n                .attr('cy', P.rowHeight / 2)\n                .attr('r', P.geomSize / 2);\n        }\n\n        const arcs = d3.pie().sortValues(null)(value);\n        const g = d3.create('svg:g');\n        g.classed('fh-geom', true);\n        g.selectAll('arcs')\n            .data(arcs)\n            .enter()\n            .append('path')\n                .attr('d', d3.arc().innerRadius(0).outerRadius(P.geomSize / 2))\n                .attr('fill', (_, i) => {\n                    return column.palette(i);\n                })\n                .style('stroke', O.theme.strokeColor)\n                .style('stroke-width', 1)\n                .attr('transform', `translate(${P.rowHeight / 2}, ${P.rowHeight / 2})`);\n        return g;\n    },\n\n    image: function(value, _, column, O, P) {\n        return d3.create('svg:image')\n            .attr('y', P.geomPadding)\n            .attr('href', value)\n            .attr('height', P.geomSize)\n            .attr('width', column.width)\n            .attr('preserveAspectRatio', 'xMidYMid');\n    }\n};\n"],"names":["module","exports","d3","$3gsfO","parcelRequire","$2b6e161c9edcf319$var$DEFAULT_OPTIONS","legendFontSize","legendTicks","labelGroupsAbc","colorByRank","theme","oddRowBackground","evenRowBackground","textColor","strokeColor","headerColor","hoverColor","$2b6e161c9edcf319$var$DEFAULT_POSITION_ARGS","rowHeight","rowSpace","rowBigspace","colWidth","colSpace","colBigspace","colAnnotOffset","colAnnotAngle","padding","minGeomSize","funkyMidpoint","$2b6e161c9edcf319$var$PositionArgs","constructor","args","$32BwG","extend","this","underscoreDeprecatedArgs","deprecatedArgs","key","Object","getOwnPropertyNames","underscore","indexOf","newKey","slice","toUpperCase","push","startsWith","length","msg","join","console","warn","calculate","rowSpacePx","rowBigspacePx","colSpacePx","geomSize","geomPadding","geomPaddingX","$2b6e161c9edcf319$var$FunkyHeatmap","data","columnInfo","columnGroups","rowInfo","rowGroups","palettes","legends","positionArgs","options","svg","rowGroupKey","index","group","merge","calculateOptions","renderGroups","rowGroupOrder","undefined","map","_","forEach","d","i","groupInfo","get","Group","renderStripedRows","O","P","rowGroup","nGroups","colorCounter","body","append","classed","attr","renderData","prevColGroup","offset","bodyHeight","size","column","maxWidth","firstColumn","geom","item","j","width","groupName","$7SRQm","GEOMS","text","node","getBBox","value","getValue","isNaN","numeric","label","colorValue","getColorValue","keys","elWidth","el","labelColor","hsl","palette","l","g","create","labelX","tooltip","toFixed","replace","datum","s2","colorNames","colorName","select","fontSize","q","drawGuide","widthPx","Math","max","round","bodyWidth","renderHeader","headerHeight","nonZeroRotate","groups","header","labels","abcCounter","$dwZfM","Column","id","$lG5F2","assignPalettes","lastCol","groupStart","groupEnd","fill","rect","level1","diff","letter","String","fromCharCode","charCodeAt","style","on","onColumnClick","bind","name","nativeWidth","rotate","height","getBoundingClientRect","center","renderLegends","footerHeight","legendEl","footer","legendXOffset","legend","enabled","offsetY","title","labelsWidth","txt","values","myOffset","funkyrect","geomWidth","geomHeight","circle","colors","range","paletteName","selectAll","enter","col","filter","xPos","img","image","imgWidth","imgHeight","arcs","pie","endAngle","PI","Array","arc","innerRadius","outerRadius","p","centroid","p1","p2","line","legendWidth","footerOffset","hideTooltip","showTooltip","mouse","html","onMouseMove","e","target","parentNode","pointer","document","elBox","comparator","sort","concat","a","b","selectChildren","remove","render","indicateSort","labelBox","sortIndicator","sortState","x","y","rootStyle","listen","$2b6e161c9edcf319$export$2e2bcd8739ae039","scaleColumn","$kwarp","ensureRowData","buildColumnInfo","buildColumnGroups","$afEFj","prepareLegends","heatmap","$eefee52b0cc720a2$export$7154591d43bbde2b","result","columns","$eefee52b0cc720a2$export$3ce631e14ef22c91","objects","obj","isArray","$eefee52b0cc720a2$export$a599c028b3176012","$9d9dc732a89d186b$export$816b5d811295e6bc","info","columnNames","id_color","id_size","id_label","str","Number","parseFloat","categorical","draw_outline","includes","maybeCalculateStats","extent","min","scale","scaleLinear","domain","rankedData","rank","uniqueRanks","$parcel$interopDefault","uniq","rankedRanks","normalizedRanks","zipObject","colorScale","itemPos","ascending","descending","$9d9dc732a89d186b$export$caf19947cd7e65b5","colData","rowToColData","$9d9dc732a89d186b$export$e33aac0e3b4702d0","some","Set","allGroups","unused","charAt","$fc81e95648bdd3b9$var$defaultPalettes","numerical","Blues","Greens","Greys","Reds","YlOrBr","Set1","Set2","Set3","Dark2","$fc81e95648bdd3b9$export$e66d39924afea2dc","names","step","scaleOrdinal","$776ad961d55bdd86$export$ba7a034cabddb75f","colInfoPalettes","legendPalettes","missingPalettes","difference","find","isNumber","$5bd757c5633cec0d$export$848bef37f8dddb4a","align","bar","radius","scaled","copy","cornerSize","nonZero","nonZeroIdx","sortValues"],"version":3,"file":"scIB.a25747d1.js.map"}