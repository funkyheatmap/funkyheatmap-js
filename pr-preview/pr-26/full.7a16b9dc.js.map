{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAUA,MAAMC,EAAc,CAChB,CAACC,GAAI,QAASC,MAAO,KAAMC,KAAM,OAAQC,KAAM,OAAQC,QAAS,MAChE,CAACJ,GAAI,MAAOC,MAAO,UAAWC,KAAM,iBAAkBC,KAAM,MAAOC,QAAS,WAAYC,QAAS,CAACC,MAAO,IACzG,CAACN,GAAI,MAAOC,MAAO,UAAWC,KAAM,sBAAuBC,KAAM,MAAOC,QAAS,WAAYC,QAAS,CAACC,MAAO,IAC9G,CAACN,GAAI,OAAQC,MAAO,SAAUC,KAAM,wBAAyBC,KAAM,YAAaC,QAAS,YACzF,CAACJ,GAAI,KAAMC,MAAO,SAAUC,KAAM,mBAAoBC,KAAM,YAAaC,QAAS,YAClF,CAACJ,GAAI,OAAQC,MAAO,SAAUC,KAAM,kBAAmBC,KAAM,YAAaC,QAAS,YACnF,CAACJ,GAAI,KAAMC,MAAO,SAAUC,KAAM,oBAAqBC,KAAM,YAAaC,QAAS,YACnF,CAACJ,GAAI,OAAQC,MAAO,SAAUC,KAAM,gBAAiBC,KAAM,SAAUC,QAAS,YAC9E,CAACJ,GAAI,KAAMC,MAAO,SAAUC,KAAM,SAAUC,KAAM,SAAUC,QAAS,YACrE,CAACJ,GAAI,KAAMC,MAAO,SAAUC,KAAM,eAAgBC,KAAM,SAAUC,QAAS,YAC3E,CAACJ,GAAI,OAAQC,MAAO,SAAUC,KAAM,kBAAmBC,KAAM,SAAUC,QAAS,YAChF,CAACJ,GAAI,OAAQC,MAAO,SAAUC,KAAM,gBAAiBC,KAAM,SAAUC,QAAS,YAC9E,CAACJ,GAAI,SAAUC,MAAO,SAAUC,KAAM,SAAUC,KAAM,QAASG,MAAO,IACtE,CAACN,GAAI,OAAQC,MAAO,SAAUC,KAAM,OAAQC,KAAM,MAAOC,QAAS,SAGhEG,EAAgB,CAClB,CAACC,OAAQ,UAAWP,MAAO,UAAWG,QAAS,QAC/C,CAACI,OAAQ,UAAWP,MAAO,SAAUG,QAAS,YAC9C,CAACI,OAAQ,UAAWP,MAAO,SAAUG,QAAS,aAG5CK,EAAa,CACf,CAACR,MAAO,QAASS,MAAO,SACxB,CAACT,MAAO,SAAUS,MAAO,YAGvBC,EAAW,CACbC,QAAS,QACTC,SAAU,QACVC,SAAU,OACVC,KAAM,CACFC,OAAQ,CAAC,UAAW,UAAW,WAC/BC,MAAO,CAAC,IAAK,IAAK,OAIpBC,EAAU,CACZ,CACIC,MAAO,OACPhB,KAAM,QACNiB,KAAM,GACNC,OAAQ,CAAC,WAAY,OACrBC,OAAQ,CAAC,eAAgB,YAE7B,CACIH,MAAO,UACPf,QAAS,WACTD,KAAM,WAIdN,EAAA0B,IAAO,cAAcC,MAAMC,KAEvBA,GADAA,EAAO5B,EAAA6B,KAAQD,GAAM,CAACE,EAAGC,IAAM/B,EAAAgC,WAAcD,EAAEE,KAAMH,EAAEG,QAC3CC,MAAM,EAAG,KAChBC,SAAQ,CAACC,EAAGC,KACbD,EAAEE,OAASD,EAAI,EAAI,eAAiB,UACpCD,EAAElB,KAAO,CAAEmB,EAAI,EAAK,GAAKA,EAAI,GAAK,EAAK,EAAG,GAC1CD,EAAElB,KAAK,GAAK,EAAIkB,EAAElB,KAAK,GAAKkB,EAAElB,KAAK,EAAE,IAEzC,MAAMqB,EAAWX,EAAKY,KAAI,CAACC,EAAGJ,KACnB,CAACjC,MAAOiC,EAAI,GAAM,QAAW,aAExCrC,EAAA0C,OAAU,QAAQC,OAAOC,aAAY,EAAAC,EAAAC,SACjClB,EACA1B,EACAqC,EACA7B,EACAE,EACAE,EACAO,EACA,CAAC0B,UAAW,IACZ,CACIC,gBAAgB,EAChBC,aAAa,IACjB","sources":["vignettes/full.js"],"sourcesContent":["import * as d3 from 'd3';\n\nimport funkyheatmap from '../src/main';\n\nif (module.hot) {\n    module.hot.accept(() => {\n        window.location.reload();\n    });\n}\n\nconst column_info = [\n    {id: \"model\", group: null, name: \"Name\", geom: \"text\", palette: null},\n    {id: \"mpg\", group: \"overall\", name: \"Miles / gallon\", geom: \"bar\", palette: \"palette1\", options: {width: 4}},\n    {id: \"cyl\", group: \"overall\", name: \"Number of cylinders\", geom: \"bar\", palette: \"palette2\", options: {width: 4}},\n    {id: \"disp\", group: \"group1\", name: \"Displacement (cu.in.)\", geom: \"funkyrect\", palette: \"palette1\"},\n    {id: \"hp\", group: \"group1\", name: \"Gross horsepower\", geom: \"funkyrect\", palette: \"palette1\"},\n    {id: \"drat\", group: \"group1\", name: \"Rear axle ratio\", geom: \"funkyrect\", palette: \"palette1\"},\n    {id: \"wt\", group: \"group1\", name: \"Weight (1000 lbs)\", geom: \"funkyrect\", palette: \"palette1\"},\n    {id: \"qsec\", group: \"group2\", name: \"1/4 mile time\", geom: \"circle\", palette: \"palette2\"},\n    {id: \"vs\", group: \"group2\", name: \"Engine\", geom: \"circle\", palette: \"palette2\"},\n    {id: \"am\", group: \"group2\", name: \"Transmission\", geom: \"circle\", palette: \"palette2\"},\n    {id: \"gear\", group: \"group2\", name: \"# Forward gears\", geom: \"circle\", palette: \"palette2\"},\n    {id: \"carb\", group: \"group2\", name: \"# Carburetors\", geom: \"circle\", palette: \"palette2\"},\n    {id: \"schema\", group: \"group2\", name: \"Schema\", geom: \"image\", width: 25},\n    {id: \"load\", group: \"group2\", name: \"Load\", geom: \"pie\", palette: \"load\"}\n];\n\nconst column_groups = [\n    {level1: \"Overall\", group: \"overall\", palette: \"none\"},\n    {level1: \"Group 1\", group: \"group1\", palette: \"palette1\"},\n    {level1: \"Group 2\", group: \"group2\", palette: \"palette2\"}\n];\n\nconst row_groups = [\n    {group: 'first', Group: 'First'},\n    {group: 'second', Group: 'Seconds'}\n];\n\nconst palettes = {\n    overall: \"Greys\",\n    palette1: \"Blues\",\n    palette2: \"Reds\",\n    load: {\n        colors: [\"#82daf2\", \"#ba4e79\", \"#ffffff\"],\n        names: ['A', 'B', 'C']\n    }\n};\n\nconst legends = [\n    {\n        title: \"Type\",\n        geom: \"image\",\n        size: 25,\n        labels: ['Electric', 'Gas'],\n        values: ['electric.png', 'ice.png']\n    },\n    {\n        title: \"Oranges\",\n        palette: \"palette2\",\n        geom: \"circle\"\n    }\n];\n\nd3.csv('mtcars.csv').then((data) => {\n    data = d3.sort(data, (a, b) => d3.ascending(+b.mpg, +a.mpg));\n    data = data.slice(0, 20);\n    data.forEach((d, i) => {\n        d.schema = i % 2 ? \"electric.png\" : \"ice.png\";\n        d.load = [(i % 3) / 6, ((i + 1) % 3) / 6, 0];\n        d.load[2] = 1 - d.load[0] - d.load[1];\n    });\n    const row_info = data.map((_, i) => {\n        return {group: i < 10 && 'first' || 'second'}\n    });\n    d3.select(\"#app\").node().appendChild(funkyheatmap(\n        data,\n        column_info,\n        row_info,\n        column_groups,\n        row_groups,\n        palettes,\n        legends,\n        {rowHeight: 28}, // position arguments\n        { // heatmap options\n            labelGroupsAbc: true,\n            colorByRank: true\n        }\n    ));\n});\n"],"names":["$3gsfO","parcelRequire","$6a436a616d52e266$var$column_info","id","group","name","geom","palette","options","width","$6a436a616d52e266$var$column_groups","level1","$6a436a616d52e266$var$row_groups","Group","$6a436a616d52e266$var$palettes","overall","palette1","palette2","load","colors","names","$6a436a616d52e266$var$legends","title","size","labels","values","csv","then","data","sort","a","b","ascending","mpg","slice","forEach","d","i","schema","row_info","map","_","select","node","appendChild","$3JaYo","default","rowHeight","labelGroupsAbc","colorByRank"],"version":3,"file":"full.7a16b9dc.js.map"}